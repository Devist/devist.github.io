<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>오동환</title>
  
  <subtitle>Donghwan&#39;s Something</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://devist.github.io/"/>
  <updated>2019-01-21T13:34:01.087Z</updated>
  <id>https://devist.github.io/</id>
  
  <author>
    <name>DongHwan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>독서기록) 일단 오늘은 나한테 잘합시다</title>
    <link href="https://devist.github.io/2019/01/21/review-books-8/"/>
    <id>https://devist.github.io/2019/01/21/review-books-8/</id>
    <published>2019-01-21T13:30:22.000Z</published>
    <updated>2019-01-21T13:34:01.087Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/01/21/review-books-8/99EF74385B9748EC33.png"><p>한두시간만에 후딱 읽은 것 같다. 이런 형태의 에세이는 원래 한두개씩 음미하며 오래 읽고 싶다는 마음이 앞서지만 항상 그러지 못한다. 아마도 독서도 하나의 임무라 생각하며, 완수하고 싶은 급한 성격 탓일 것이다.</p><p>요새는 벌려놓은 일이 많아 예전보다 조금 더 한국인스럽게 빨리빨리를 외치는 것 같다. 그러나 나의 체력은 예전과 반비례해서, 실상은 오히려 진도가 나가지 않는 것이다. 무엇 하나 마무리짓지 못하고 일만 벌려놓은 요즘, 짧은 책 하나 완독하며 깔끔한 마무리를 짓는 느낌을 갖고 싶었다. 그리고 독서의 깔끔한 마무리는 역시, 요새 잘하지 않는 블로그에 리뷰까지 남기는 것이지.</p><h3 id="책속-한-구절"><a href="#책속-한-구절" class="headerlink" title="책속 한 구절"></a>책속 한 구절</h3><blockquote><p>강하다는 것은 아무렇지 않은 척하는게 아니라 거부할 줄아는 것이다.</p></blockquote><blockquote><p>가장 무서운 지옥은 견딜 만한 지옥일 것이다. 빠져나올 생각을 안 할 테니까…</p></blockquote><blockquote><p>원목을 흉내내기 위해 일주러 원목의 흠집인 옹이까지 따라한 것이다. ‘진짜엔 흠이 있구나.’ 그때 깨달은 것을 어째서 스스로에겐 적용하지 못한 것일까?</p></blockquote><blockquote><p>이젠 인생의 모든 순간을 내 마음에 드는 일로 채우고 싶다는 생각은 하지 않는다. 물론 그러면 좋겠지만 아마 그론 삶은 여간해선 주어지지 않을 것이다. 그냥 그 사실을 받아들이고 마음에 들지 않는 순간을 견딜 수밖에. 인생은 종합선물세트니까.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/01/21/review-books-8/99EF74385B9748EC33.png&quot;&gt;
&lt;p&gt;한두시간만에 후딱 읽은 것 같다. 이런 형태의 에세이는 원래 한두개씩 음미하며 오래 읽고 싶다는 마음이 앞서지만 항상 그러지 못한다. 
      
    
    </summary>
    
      <category term="Review" scheme="https://devist.github.io/categories/review/"/>
    
      <category term="Books" scheme="https://devist.github.io/categories/review/books/"/>
    
    
      <category term="독서" scheme="https://devist.github.io/tags/%EB%8F%85%EC%84%9C/"/>
    
      <category term="책" scheme="https://devist.github.io/tags/%EC%B1%85/"/>
    
      <category term="Book" scheme="https://devist.github.io/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>독서기록) 지식 제로부터 배우는 소프트웨어 테스트</title>
    <link href="https://devist.github.io/2019/01/21/review-books-7/"/>
    <id>https://devist.github.io/2019/01/21/review-books-7/</id>
    <published>2019-01-21T12:13:12.000Z</published>
    <updated>2019-01-21T13:29:08.594Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/01/21/review-books-7/9944EE415A5780202E.png"><p>소프트웨어 테스트에 대해서 궁금하지만, 너무 딱딱한 교재 같은 책은 읽기 싫었다. 찾다 보니 손쉽게 지식 제로부터 배우는 소프트웨어 테스트라는 책을 찾을 수 있었고, 회사에서 책을 신청했다.</p><p>책에서 품질이 나쁜 소프트웨어란 버그 때문에 본래의 기능이 제한되어 고객이나 사용자에게 해당 소프트웨어로부터 기대하는 기능이나 가치를 제공할 수 없는 소프트웨어라 정의한 후, 품질 개선 관점에서의 소프트웨어 테스트를 주로 설명한다.</p><p>크게 </p><ul><li>화이트박스 테스트 </li><li>블랙박스 테스트</li><li>비기능 요구 테스트</li><li>탐색적 테스트</li><li>테스트 자동화</li><li>테스트 성공의 방정식</li></ul><p>등에 대해서 설명하며, TDD, 애자일, 자동 테스트가 필요한 테스트 케이스 분류 등 궁금한 내용들을 짧게나마 언급하며 궁금할 수 있는 내용에 대해서 어느 정도 해결해준다.</p><p>추천 대상으로는, </p><ul><li>소프트웨어 테스트가 궁금한 사람</li><li>소프트웨어 테스트 기술자가 없고, Q/A 파트가 없는 등 소프트웨어 테스트 도입이 필요한 사람</li><li>소프트웨어 테스트에 대한 전반적인 기초 지식을 갖고 싶은 사람</li></ul><p>등 입문자에게 추천하며,</p><ul><li>테스트 자동화에 대해 깊게 알고 싶은 사람</li><li>테스트 툴 등을 알아보고 적용하고 싶은 사람</li></ul><p>등 테스트 자동화나 툴에 대해 알고 싶은 사람들에게는, 이 책이 모든 걸 설명해주지는 않는다고 말해주고 싶다.</p><p>소프트웨어 테스트에 대해 지식이 부족한 사람으로서, 전반적으로 작고 얇은 책 안에서 많은 궁금증들을 해결할 수 있어서 좋았다.   </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/01/21/review-books-7/9944EE415A5780202E.png&quot;&gt;
&lt;p&gt;소프트웨어 테스트에 대해서 궁금하지만, 너무 딱딱한 교재 같은 책은 읽기 싫었다. 찾다 보니 손쉽게 지식 제로부터 배우는 소프트웨어 테
      
    
    </summary>
    
      <category term="Review" scheme="https://devist.github.io/categories/review/"/>
    
      <category term="Books" scheme="https://devist.github.io/categories/review/books/"/>
    
    
      <category term="독서" scheme="https://devist.github.io/tags/%EB%8F%85%EC%84%9C/"/>
    
      <category term="책" scheme="https://devist.github.io/tags/%EC%B1%85/"/>
    
      <category term="Book" scheme="https://devist.github.io/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>독서기록) 회복탄력성</title>
    <link href="https://devist.github.io/2019/01/21/review-books-6/"/>
    <id>https://devist.github.io/2019/01/21/review-books-6/</id>
    <published>2019-01-21T12:13:06.000Z</published>
    <updated>2019-01-21T13:25:16.802Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/01/21/review-books-6/99594C335A09A76615.png"><h4 id="회복탄력성"><a href="#회복탄력성" class="headerlink" title="회복탄력성"></a>회복탄력성</h4><p>자신에게 닥치는 온갖 역경과 어려움을 오히려 도약의 발판으로 삼는 힘.</p><p>성공은 어려움이나 실패가 없는 상태가 아니라 역경과 시련을 극복해낸 상태를 말한다.</p><p>떨어져본 사람만이 어디로 올라가야 하는지 그 방향을 알고, 추락해본 사람만이 다시 튀어올라가야 할 필요성을 절감하듯이 바닥을 쳐본 사람만이 더욱 높게 날아오를 힘을 갖게 된다. </p><p>역경이야말로 사람을 더욱더 강하게 튀어 오르게 하는 스프링보드와 같은 역할을 한다.. 역경으로 인해 나락으로 떨어졌다가도 강한 회복탄력성으로 되튀어 오르는 사람들은 대부분의 경우 원래 있었던 위치보다 더 높은 곳까지 올라간다.</p><h4 id="회복탄력성이-높은-사람이란"><a href="#회복탄력성이-높은-사람이란" class="headerlink" title="회복탄력성이 높은 사람이란"></a>회복탄력성이 높은 사람이란</h4><p>기억자아가 자신의 고난과 역경에 대해 끊임없이 긍정적인 의미를 부여하고, 긍정적으로 스토리텔링하는 능력을 지닌 사람.</p><p>회복탄력성이 높은 사람들은 스스로의 실수에 대해 보다 긍정적인 태도를 지닌다. 그들의 뇌는 습관적으로 보다 더 과감하고 도전적이어서 늘 새로움을 추구한다. 자신의 실수에 대해 예민하게 반응하되, 실수를 두려워하지 않는 것이 긍정적인 뇌의 특징이다.</p><p>인지심리학의 연구 결과에 따르면, 한 개인이 목표 달성을 위해 노력하는 데 있어서 고려해야 할 중요한 능력은 바로 스스로의 수행에 대해 평가하고 정확하게 답할 수 있는 능력이다. 즉 “내가 지금 잘하고 있는가?”라는 질문에 제대로 답할 수 있는 능력이다. 이것이 바로 스스로의 행동을 살펴보는 자기 모니터링 능력이라고 할 수 있는데, 이와 관련해서 특히 중요한 것이 실수를 했을 때 이를 탐지하는 기능이다. 인지과학은 자신의 실수를 모니터링하는 것을 돕는 특별한 뇌 기제가 존재함을 밝혀냈다. 이것이 바로 실수관련부적전위로 알려진 뇌파 신호인데, 이것은 대략 실수가 일어난 직후에 아주 짧은 시간 동안 -0.04초~0.1초사이-에 관찰된다. 실수관련부적전위가 강하게 나타나는 사람일수록 자신의 실수를 잘 탐지하며, 스스로의 수행을 정확히 평가하고, 목표달성을 위해 더 노력할 수 있는 사람이라 할 수 있다. 자신의 실수를 금방 알아차리고 이를 수정하려는 ‘열린 자세’를 지닌 뇌를 소유한 사람이라고 볼 수 있는 것이다.</p><h4 id="회복탄력성이-낮은-사람"><a href="#회복탄력성이-낮은-사람" class="headerlink" title="회복탄력성이 낮은 사람"></a>회복탄력성이 낮은 사람</h4><p>회복탄력성이 낮은 사람들은 천천히, 조심스럽게 응답했고 따라서 실수를 훨씬 덜 했다. 그러나 회복탄력성이 높은 사람들은 상대적으로 훨씬 더 빠르게 응답했고 따라서 실수율도 훨씬 더 높았다….. 이는 실수를 두려워하는 소심한 사람일수록 회복탄력성이 낮으며 자신의 실수 - 혹은 역경 - 를 회피하려는 성향이 대단히 높다고 할 수 있다….. 회복 탄력성이 높은 사람들은 실수를 두려워하지 않으면서도 자신의 실수에 대해서는 스스로 민감하게 알아차리는 뇌를 지닌 사람들이다. 설령 실수를 범한다 해도 실수로부터의 피드백을 적극적으로 받아들이는 습관이 들어 있는 뇌를 지닌 사람들이다.</p><p>회복탄력성이 낮은 사람들은 실수를 지나치게 두려워한다. 이런 사람들은 실수는 덜 하지만 정작 실수를 했을 경우에 그들의 뇌는 민감하게 반응하지 않는다. 실수를 적극적으로 모니터링하고 받아들이려 하기보다는 억누르고 무시하려는 무의식이 작동한다고도 해석할 수 있다.</p><p>한마디로, 회복탄력성이 높은 사람들은 스스로의 실수에 대해 보다 긍정적인 태도를 지닌 사람들이다. 그들의 뇌는 습관적으로 보다 더 과감하고 도전적이어서 늘 새로움을 추구한다. 자신의 실수에 대해 예민하게 반응하되, 실수를 두려워하지 않는 것이 회복탄력성이 높은 긍정적인 뇌의 특징이다.</p><p><br></p><h2 id="나의-뇌의-회복탄력성을-높이는-방법"><a href="#나의-뇌의-회복탄력성을-높이는-방법" class="headerlink" title="나의 뇌의 회복탄력성을 높이는 방법"></a>나의 뇌의 회복탄력성을 높이는 방법</h2><h4 id="1-뇌에-새기기"><a href="#1-뇌에-새기기" class="headerlink" title="1.뇌에 새기기"></a>1.뇌에 새기기</h4><p>회복탄력성을 높이려면 내 삶에서 일어나는 모든 사건들을 보다 더 긍정적으로 받아들이는 뇌가 필요하다. 무의식적인 수준에 자동적으로 내가 겪는 경험에 긍정적인 스토리텔링을 해주는 ‘기억하는 자아’가 필요한 것이다. 이러한 긍정적이고도 회복탄력적인 뇌는 훈련을 통해서 얻을 수 있다. 다시 말해서 회복탄력성은 뇌에 새겨진 습관의 문제다. 긍정적 스토리텔링을 하는 습관이 나의 뇌에 들도록 훈련해야 한다. 이는 뇌의 긍정적 정보처리 루트를 활성화한다는 뜻과 같다. 나에게 일어나는 크고 작은 고민거리나 어려운 일들을 순간순간 긍정적으로 받아들이고 대처할 수 있는 ‘습관’을 들여야 한다.</p><p>뇌에 깊이 습관화하자. </p><p>프로골프선수와 아마추어는 골프 스윙이라는 유사한 행위를 하고 있는 것처럼 보이지만, 그 둘의 뇌는 전혀 다른 일을 하고 있다고 해도 과언이 아니다. 아마추어 골퍼들은 스윙할 때 뇌의 다양한 부위를 사용한다. 한마디로 생각이 많은 것이다. 아마도 “하체를 단단히 고정시키고, 어깨 회전은 충분히 하고, 손목 코킹 각도 유지하면서 힘 빼고 끌어내리다가 골프채를 던지듯이 치고…” 등등 배운 내용을 머릿속에서 정리하는 것이리라. 즉 아마추어 골퍼에게 스윙은 여전히 명시적 지식에 따른 ‘몸 움직이기’라 할 수 있다. 반면 LPGA 프로 골프선수들은 스윙할 때 초보자들과는 전혀 다르게, 아주 특정한 부위의 뇌만을 사용하는 것으로 나타났다. 뇌를 훨씬 적게 사용하는 것이다. 그야말로 머릿속이 복잡하지 않고 ‘아무 생각 없이’ 치는 것처럼 보인다. 이렇게 아무 생각 없이 치려면 골프 스윙이라는 동작이 몸에 완전히 배어 있어야 한다. 다시 말햇 ㅓ뇌에 그러한 동작을 가능하게 하는 신경망 구조가 잘 형성되어 있어서 골프 스윙할 때마다 뇌의 여러 분야에 저장되어 있는 다양한 정보를 다시 긁어 모으는 복잡한 일을 할 필요가 없다. 프로선수에게 골프 스윙은 뇌에 깊이 습관화되어 있는 셈이다.</p><p>이렇듯, 회복탄력성의 습득도 부정적인 사건에 긍정적으로 대처함으로써, 실수를 예민하게 알아차리되 실수 자체를 두려워하지 않는 뇌로 재-회로와되도록 반복 연습이 필요하다.</p><h4 id="2-웃기"><a href="#2-웃기" class="headerlink" title="2. 웃기"></a>2. 웃기</h4><p>얼굴 표정은 뇌의 감정 상태를 그대로 드러내는 유리창과도 같다. 뒤센의 미소를 짓는 사람들의 뇌는 기본적으로 긍정적 정서를 타고났다고 볼 수 있다. 이러한 긍정적 정서야말로 회복탄력성의 원천이다.</p><p>지금 거울 앞에 서서 활짝 웃어보라. 그때 당신의 웃음이 위쪽 두 사진과 유사하다면 당신의 회복탄력성 점수도 높았을 가능성이 크다. 만약 아래쪽 사진에 가깝다면 활짝 웃는 연습부터 시작해야 한다.</p><p>1억을 기부하면서 생기는 기쁨과 행복은 1억을 공짜로 얻는 것보다 더 크다. 그것이 세상의 이치이자 행복의 원리다. 남을 행복하게 해줘야만 우리는 스스로 행복해질 수 있다. 남을 배려하고 봉사하는 착한 마음으로 살면 그것이 자신에게 복으로 돌아온다는 것은 이제 단순히 도덕적인 이야기만이 아닌 과학적으로 입증된 사실이다. 이제 즐겁고 긍정적인 마음으로 회복탄력성을 키우도록 해보자. 당신의 인생에 더 이상 실패란 없다. 아니, 실패는 있을지도 모른다. 그러나 그 실패 때문에 좌절하거나 무너지거나 주저앉는 일은 없을 것이다. 그 실패를 도약의 디딤돌로 삼아 더 높이 튀어오르는 자신을 발견하게 될 것이다.</p><p><br></p><h2 id="회복-탄력성-제-1-요소-자기조절능력"><a href="#회복-탄력성-제-1-요소-자기조절능력" class="headerlink" title="회복 탄력성 제 1 요소 : 자기조절능력"></a>회복 탄력성 제 1 요소 : 자기조절능력</h2><h4 id="자기조절능력이란"><a href="#자기조절능력이란" class="headerlink" title="자기조절능력이란,"></a>자기조절능력이란,</h4><p>스스로의 감정을 인식하고 그것을 조절하는 능력이다.. 자기조절능력은 어려운 상황이 닥쳤을 때, 첫째로 스스로의 부정적 감정을 통제하고 긍정적 감정과 건강한 도전의식을 불러일으키며(<strong>감정조절력</strong>), 둘째로 기분에 휩쓸리는 충동적 반응을 억제하고(<strong>충동통제력</strong>), 마지막으로 자신이 처한 상황을 객관적이고도 정확하게 파악해서 대처 방안을 찾아낼 수 있는(<strong>원인분석력</strong>) 능력이다.</p><h4 id="자기이해지능"><a href="#자기이해지능" class="headerlink" title="자기이해지능"></a>자기이해지능</h4><p>자기 자신의 생각과 느낌과 감정 상태를 스스로 파악하고 통제하는 능력.</p><p>..이 결과가 말해주는 것은 분명하다. 자기 분야에서 뛰어난 업적을 남기는 사람들은 각각 해당 분야와 관련되는 지능과 함께 모두 자기이해지능이 높다는 사실이다. 다시 말해서, 논리-수리지능만 높다고 해서 뛰어난 과학자가 되는 것은 아니며, 음악지능만 높다고 해서 뛰어난 음악가로 성공하게 되는 것도 아니다. 운동지능만 높아서는 뛰어난 운동선수로 성공하기 어렵다는 것을 의미한다. 어느 한 가지 이상의 지능과 함께 반드시 자기이해지능이 높아야만 뛰어난 업적을 이룰 수 있게 되는 것이다.</p><h4 id="감정조절력"><a href="#감정조절력" class="headerlink" title="감정조절력"></a>감정조절력</h4><p>압박과 스트레스 상황에서도 평온함을 유지할 수 있는 능력. 회복탄력성이 높은 사람들은 스스로의 감정과 주의력과 행동을 통제할 수 있는 능력을 지니고 있다. 감정조절력은 분노나 짜증처럼 부정적인 감정을 억누르는 것만을 의미하는 것은 아니다. 필요할 때면 언제나 긍정적인 감정을 스스로 불러일으켜서 신나고 재미있게 일할 수 있는 능력도 의미한다.</p><h5 id="긍정적-정서-향상의-효과"><a href="#긍정적-정서-향상의-효과" class="headerlink" title="긍정적 정서 향상의 효과"></a>긍정적 정서 향상의 효과</h5><p>​    긍정적 정서를 향상시키는 훈련을 하게 되면 도파민 분비에 따른 긍정적 정보처리 시스템이 보다 활발히 작용하게 되어 마치         선천적으로 쾌할하고 행복한 성격을 지닌 사람의 뇌에 가까워지게 된다.</p><p>​    대인관계능력은 기본적으로 자기 자신과 타인을 얼마나 동일시하는가, 혹은 타인과 나 사이의 건널 수 없는 간극을 어떻게 극복해내는가 하는 태도에 달려 있다. 즉 관계성이란 확장된 자아의 문제다. 긍정적 정서는 확장된 자아 개념을 유발시킴으로써 다른 사람들과 나 자신을 동일시하게 한다. 그럼으로써 다른 사람들을 보다 더 긍정적으로 보게 해준다. 이러한 이유 때문에 긍정적 정서가 높아지면 자아확장력이 높아지고 한마디로 더 좋은 사람이 된다. 봉사나 선행을 베풀 가능성도 높아지고, 친절해지며 ,관계 맺기에 적극적이 된다.</p><p>​    구글의 경우.. 창업자인 브린과 페이지는 구글이 이렇게 기적에 가까운 성장을 이뤄낸 것은 직원들의 창의성과 문제해결능력 덕분이라는 것을 굳게 믿고 있으며, 그러한 믿음은 전세계 구글 사의 사무실 환경에 그대로 반영되어 있다. 브린과 페이지는 ‘즐겁지 않으면 창의력이 나오지 않는다’는 앨리스 아이센의 연구 결과를 바탕으로 ‘펀(fun) 경영’을 실천해 간다. 사무실을 네온사인으로 현란하게 치장한다거나 온갖 기괴한 장난감으로 가득 채우는 것은 모두 사원들을 즐겁게 하기 위한 노력이며 이는 과학적인 근거가 있는 사실이다. 긍정적 정서의 창의성과 문제해결능력 증진이라는 앨리스 아이센의 녀구 결과가 그대로 반영된 현장인 셈이다.</p><p>​    예컨대 구글의 한국지사 사무실을 보면 마치 놀이터와 장난감 가게를 연상시킨다. 전세계 구글의 구내식당은 모두 무료이며 제공되는 음식은 어떤 구내식당보다도 고급스럽다. 휴게실에는 포켓볼과 미니축구 등 다양한 놀이기구가 완비되어 있고 안마 의자와 게임기도 있다.</p><p>​    사람들은 긍정적 정서와 행복감을 갖게 되면 생각의 폭이 넓어지고, 깊어지고, 빨라지며, 창의적으로 되고 상상력도 풍부해진다. 따라서 자신이 지닌 능력을 극대화하기 위해서는 스스로 긍정적인 감정을 불러일으킬 줄 알아야 한다. 중요한 순간에 긍정적 정서를 스스로 유발하는 습관이 필요하다.</p><p>​    뛰어난 업무수행 능력과 원만한 대인관계로 성공 가도를 달리는 사람들은 지능이 높은 사람들이 아니다. 한 개인의 지능과 성취도에는 별다른 상관관계가 없다는 것이 학계의 정설이다. 직장, 사회, 학교 생활에서의 성공 여부는 중요한 일이 닥쳤을 때 스스로 얼마만큼 긍정적인 감정을 불러일으켜 신나게 일할 수 있느냐에 달려 있다. 중요한 순간에 스스로에게 ‘사탕’을 주어서 긍정적 정서를 불러일으키는 것이 습관화된 사람이 뛰어난 능력을 발휘한다는 뜻이다.</p><h4 id="충동통제력-놀지-말고-공부해라"><a href="#충동통제력-놀지-말고-공부해라" class="headerlink" title="충동통제력. 놀지 말고 공부해라?"></a>충동통제력. 놀지 말고 공부해라?</h4><p>매슬로우에 따르면 사람을 움직이는 데에는 기본적으로 두 가지 동기가 있다. 하나는 부족한 것을 채우려는 ‘결핍 동기’와 다른 하나는 보다 나은 자기 모습을 위해 노력하려는 ‘성장 동기’다. 만약 배가 고파서 무언가를 먹으려 한다면 그것은 배고픔이라는 결핍을 해결하려는 결핍동기에 의한 행동이다. 반면에 보다 나은 운동선수가 되기 위해 열심히 연습한다면 그것은 성장동기에 의한 행동이다.</p><p>충동통제력은 결핍동기보다는 성장동기와 더 밀접한 관련성을 갖는다. 단순히 고통을 참아내는 힘은 오히려 결핍회피동기와 관련된다. 배가 고파도 참고, 졸려도 참고, 괴로워도 그냥 참을 수 있는 것은 단순한 인내력이지 충동통제력이 아니다. 반면에 충동통제력은 자신의 보다 나은 모습을 위해서 즐거운 마음으로 꾸준히 노력할 수 있는 성장지향적 자기조절능력을 의미한다.</p><p>우리나라는 학교나 직장이나 모두 지나칠 정도로 보여지는 보상에 치중한 동기부여 시스템을 갖고 있다. 공부를 잘하면 상을 받고 못 하면 벌을 받는다는 개념은 너무나도 견고하다. 공부가 재미있어서 한다는 것은 상상조차 할 수 없는 일이 된다. 직장에서도 마찬가지다. 당근과 채찍이라는 외적 보상만이 넘쳐난다. 일은 자기가 좋아서 하는 것이 아니라 먹고 살기 위해서 어쩔 수 없이 하는 고통의 덩어리로 여겨진다. 성적이나 월급이라는 외적 보상을 위해서 참아내야 하는 고통이 학업이고 업무다. 이러한 삶에서는 고통이 일시적으로 사라진 상태를 행복한 상태라 착각한다. 일이나 공부를 하지 않는 것이 곧 휴식이고 행복이라고 생각하게 되는 것이다.</p><p>바로 이러한 이유 때문에 그렇게도 많은 시한부 생명 선고자들이 행복한 삶을 살게 되었다고 말하는 것이다. 미래를 위해 참고 사는 사람들은 지금 현재의 삶은 내가 진짜 원하는 삶이 아니라고 생각한다. 어쩔 수 없이 참고 견디며 살고 있는 것뿐이라 생각하게 마련이다. 그러나 이러한 사람들이 어느날 갑자기 불치의 병으로 시한부 생명을 선고받는 순간, 이들은 달라진다. 이제 더 이상 미래를 위해 유보하는 식의 삶을 살지 않게 되는 것이다. 지금 내가 가장 하고 싶은 일, 진정으로 의미있다고 생각하는 일들을 지금 당장 시작하게 된다. 즉 진정으로 자기가 ‘원하는’ 삶을 지금 현재에 살기 시작하게 된다. 그 순간 그들은 무한한 행복을 느끼기 시작한다.</p><p>지금 행복하면서도 미래의 성취와 성공을 위해 더 많은 것을 준비할 수 있는 사람이 바로 그들이다. 성공하고 나면 행복할 것이라고 믿는 사람이 아니라, 행복하기 때문에 성공할 수밖에 없는 사람들이다.</p><p>탈 벤 샤하르에 따르면 일하는 것을 고통으로, 참아야 할 괴로움으로 여기는 사람들은 오히려 커다란 성취를 이뤄내지 못한다. 인류 역사를 통틀어서 위대한 업적을 남긴 사람들은 모두 자신이 하는 일에서 커다란 즐거움과 사명감과 의미를 찾은 사람들이다. 보다 많은 연봉이나 보다 높은 직위에 오르기 위해서 자신이 하는 일을 ‘참으면서’ 하는 사람이 위대한 업적을 남긴 예는 없다.</p><p>..그러나 나의 삶은 어디 먼 미래에 있는 것이 아니다. 하루하루, 한순간 한순간의 적분이 곧 나으 ㅣ삶이다. 정상에 오르는 것을 ‘목표’로 두기는 하되, 내딛는 발걸음 하나하나를 즐기면, 즉 과정을 즐기면 힘들지 않고 정상을 향해 갈 수 있다. 이것이 칙센트미하이가 말하는 몰입 혹은 최적의 경험이다. 그렇기 때문에 행복은 ‘성공의 결과’라기보다는 ‘성공에 이르는 길’이라 할 수 있다. 성공한 사람이 행복하다기보다는 행복한 사람이 성공하는 것이다. 회복탄력성이 높은 사람이 행복해진다기보다는 행복해져야 회복탄력성이 높아진다는 뜻이다.</p><h4 id="원인분석력-스토리텔링의-ABC"><a href="#원인분석력-스토리텔링의-ABC" class="headerlink" title="원인분석력, 스토리텔링의 ABC"></a>원인분석력, 스토리텔링의 ABC</h4><ul><li><p>나쁜 일이 생겼을 때 비관적인 사람 </p><ul><li>개인성, 영속성, 보편성</li></ul></li><li><p><strong>나쁜 일이 생겼을 때 낙관적인 사람 </strong></p><ul><li>비개인성, 일시성, 특수성</li></ul></li><li><p>좋은 일이 생겼을 때 비관적인 사람 </p><ul><li>비개인성, 일시성, 특수성</li></ul></li><li><p><strong>좋은 일이 생겼을 때 낙관적인 사람 </strong></p><ul><li>개인성, 영속성, 보편성</li></ul></li></ul><h5 id="Example-1-나쁜-일-열심히-한-프로젝트가-결국-실패했다"><a href="#Example-1-나쁜-일-열심히-한-프로젝트가-결국-실패했다" class="headerlink" title="Example 1) 나쁜 일. 열심히 한 프로젝트가 결국 실패했다."></a>Example 1) 나쁜 일. 열심히 한 프로젝트가 결국 실패했다.</h5><ul><li><p><strong>왜 나만 실패 했을까</strong>(개인성) vs <strong>나만 실패하는 것은 아니다. 실패는 누구나 할 수 있다</strong>(비개인성)</p></li><li><p><strong>왜 나는 항상 실패할까</strong>(영속성) vs <strong>이번엔 어쩌다 운이 나빠 실패한 것일 뿐이다</strong>(일시성)</p></li><li><p><strong>왜 내가 하는 일들은 다 이 모양일까</strong>(보편성) vs <strong>난 이 프로젝트에만 실패했을 뿐 다른 일들은 다 잘하고 있다</strong>(특수성)</p></li></ul><h5 id="Example-2-좋은-일-꼭-취직하고-싶은-회사로부터-합격통보를-받았다"><a href="#Example-2-좋은-일-꼭-취직하고-싶은-회사로부터-합격통보를-받았다" class="headerlink" title="Example 2) 좋은 일. 꼭 취직하고 싶은 회사로부터 합격통보를 받았다."></a>Example 2) 좋은 일. 꼭 취직하고 싶은 회사로부터 합격통보를 받았다.</h5><ul><li><p><strong>나 같은 사람을 뽑다니, 대충 아무나 뽑았군</strong>(비개인성) vs <strong>나를 뽑다니, 역시 내가 노력한 보람이 있어</strong>(개인성)</p></li><li><p><strong>합격 운이 좋아 이번에만 어쩌다 붙은 거겠지</strong>(일시성) vs <strong>내가 하고자 하는 일은 언제나 다 잘 되었어</strong>(영속성)</p></li><li><p><strong>회사 합격은 어떻게 되었지만 내 인생에 다른 모든 면은 엉망이야</strong>(특수성) vs <strong>회사 합격되는 것을 비롯해서 내 인생의 모든 면은 다 제대로 되고 있어</strong>(보편성)</p></li></ul><p><br></p><h2 id="회복-탄력성-제-2-요소-대인관계능력"><a href="#회복-탄력성-제-2-요소-대인관계능력" class="headerlink" title="회복 탄력성 제 2 요소 : 대인관계능력"></a>회복 탄력성 제 2 요소 : 대인관계능력</h2><p>좋은 인간관계를 맺는 사람은 그만큼 건강하고 행복한 삶을 살아가는 사람이다. 사람을 잘 사귀고 원만한 인간관계를 유지하는 사람일수록 위기에 강하다. [소통능력, 공감능력, 자아확장력]</p><h4 id="대인관계능력"><a href="#대인관계능력" class="headerlink" title="대인관계능력"></a>대인관계능력</h4><p>핵심은 다른 사람의 마음과 감정 상태를 재빨리 파악하고, 깊이 이해하고, 공감함으로써 원만한 인간관계를 맺고 유지하는데 있다. 이러한 능력을 지닌 사람은 주변 사람들의 마음을 잘 헤아려서 편안하게, 행복하게 해준다. 또한 대인지능이 높은 사람은 강한 리더십을 발휘한다. 왜냐하면 사람들은 본능적으로 자신을 행복하게 해주는 사람을 따르게 마련이다. 리더십을 잘 발휘할 수 있느냐의 문제는 결국 주변 사람들에게 얼마나 행복을 잘 나눠줄 수 있느냐의 문제다.</p><p>사람을 잘 사귀고 좋은 인간관계를 유지하는 사람일수록 위기에 강하다. 친구가 많은 사람은 더 건강하고, 병원에 덜 가며, 심장병에 걸릴 확률도 적고, 면역체계도 튼튼하다는 사실은 이미 많은 연구 결과들이 입증하고 있다.</p><p>사람은 혼자서는 강할 수가 없다. 외로운 사람은 쉽게 나약해진다. 주변 사람들과 따뜻한 정을 나누고 훈훈한 정서적 지원을 받는 사람일수록 내면이 강인하다. 어려움을 이겨내고 역경을 극복하는 사람들 주변에는 한결같이 사랑과 신뢰를 보내주는 든든한 지원자가 있다. 어떤 사람에게 역경이 닥쳤을 때 주변 사람들이 하나 둘 등을 돌린다면, 그 사람은 다시 일어설 힘을 얻기 힘들다. 역경과 고난에도 불구하고 그 사람의 곁을 지켜주는 든든한 마음의 후원자가 있을 때, 그 사람은 강한 회복탄력성을 갖게 된다.</p><p>에리히 프롬의 &lt;사랑의 기술&gt;에서 누누히 강조하듯이 ‘사랑할 수 있는 능력’은 우리가 꼭 배우고 키워야 할 능력이며, 마틴 셀리그만이 그의 저서 &lt;진정한 행복&gt;에서 강조하듯이 ‘사랑받을 수 있는 능력’도 행복과 긍정적 정서를 위해 꼭 필요한 능력이다.</p><h4 id="1-상대의-호감을-끌어내는-대화기술-소통-능력"><a href="#1-상대의-호감을-끌어내는-대화기술-소통-능력" class="headerlink" title="1. 상대의 호감을 끌어내는 대화기술: 소통 능력"></a>1. 상대의 호감을 끌어내는 대화기술: 소통 능력</h4><p>소통은 일종의 기술이다. 온갖 종류의 운동이나 미술 활동, 악기 다루기 등 모든 기술의 습득에는 일정한 규칙에 따른 체계적인 교육과 연습이 필요하다. 소통능력 역시 조금만 체계적으로 훈련하고 연습하면 금방 그 효과를 실감할 수 있다. 하지만 그동안 교육의 기회가 적어 어렵게 느껴질 수도 있다.</p><p>소통능력이 뛰어난 사람은 인간성 좋고, 왠지 같이 있고 싶고, 호감이 가고, 같이 일하고 싶은 그런 사람이다. 비록 말은 어눌하게 해도 호감을 주는 사람이라면 소통능력이 뛰어난 사람이다. 소통능력에는 감정이입과 상대방에 대한 배려의 능력, 감정지능, 사교적 지능이 다 포함되기 때문이다. 말은 청산유수로 잘하지만, 왠지 친해지고 싶지 않은 사람은 소통능력이 오히려 낮은 사람이다.</p><h5 id="소통의-두-가지-차원"><a href="#소통의-두-가지-차원" class="headerlink" title="소통의 두 가지 차원"></a>소통의 두 가지 차원</h5><p>보고적 말하기(report talk)와 관계적 말하기(rapport talk).</p><p>“우리 내일 영화 보러 갈래?”는, 영화를 보겠냐는 의사 타진이자 나는 너와 영화를 같이 보러 갈 정도로 친한 사이라는 관계에 대한 언급이기도 하며, 또는 “영화를 같이 보러 가는 사이가 되고 싶다”는 관계 형성에 대한 의사 표현의 기능도 담당하고 있다.</p><p>교수가 조교에게 “이 논문 좀 복사해 와라”라고 말한다면, 이 소통은 내용의 차원에서는 ‘복사 해달라’는 메시지의 전달이다. 동시에 이 말은 관계적인 측면에서 보면, ‘나는 선생이고, 너는 조교다. 내가 윗사람이고, 너는 아랫사람이다’라는 관계에 대한 언급이 함축되어 있는 것이다.</p><p>소통의 이 두 가지 측면을 잘 이해하고 조화시키는 능력이 소통능력의 핵심이다. 인간관계에 있어서 대부분의 갈등은 소통의 이 두 가지 차원이 서로 조화를 이루지 못할 때 일어난다. 인간관계의 갈등이 일어날 대 흔히 하는 이야기가 “네가 어떻게 나한테 그럴 수 있어?”, “우리 사이에 어떻게 그런 얘기를 할 수가 있어?” 라는 말이다. 이는 바로 메시지 차원, 즉 말한 내용 자체가 문제라기보다는 그런 얘기를 통한 인간관계의 문제인 것이다.</p><p>커뮤니케이션의 원래 의미는 메시지를 상대방에게 전달하기보다는 어떠한 경험을 함께 한다는 뜻이다. 공통의 경험을 함께 나누는 것이 곧 소통이다. 공유된 경험은 내가 지금 경험하는 것을 상대방도 마찬가지로 경험하리라느 ‘공감’의 원천이다. 대표적인 예가 음식을 함께 나눠 먹는 일이다. 즉 내가 지금 느끼는 이 음식의 맛을 상대방도 마찬가지로 느끼리라는 믿음이 소통의 원형이다.</p><p>예컨대 전철에서 처음 본 사람에게 “어디까지 가시죠?” 라고 묻는 것은 성공적인 소통이 되기 힘들다. ‘공유된 경험’이 없기 때문이다. 그보다는 전철이 한강다리 위를 지나갈 때, 같이 서 있는 사람에게 “이렇게 한강을 보니 서울도 참 아름다운 도시죠?” 라며 지금 함께 경험하고 있는 것에 대해 말을 건네는 편이 자연스러운 대화의 방법이다.</p><h5 id="소통불안-극복하기"><a href="#소통불안-극복하기" class="headerlink" title="소통불안 극복하기"></a>소통불안 극복하기</h5><p>소통은 곧 자기 자신을 남에게 드러내는 자기제시다. 자기제시는 일정한 인상을 타인에게 남기기 마련이다. 따라서 소통능력을 향상시킨다는 것은 자기제시를 통해 자기가 원하는 인상을 타인에게 심어줄 수 있는 능력을 향상시킨다는 뜻이다.</p><p>소통불안은 두 가지 원인에 의해서 발생한다.</p><p>첫째는 과다한 자기제시의 동기이다. 즉 상대방에게 잘 보이려는 욕심이 클수록 소통불안은 증가한다. 꼭 합격하고 싶은 회사의 면접 시험에서는 면접관에게 잘 보이고 싶은 마음에 불안감이 커진다. 중요한 프레젠테이션을 하려는 순간이나, 마음에 드는 이성 앞에 서면 불안감이 커지는 것도 상대방에게 잘 보이고 싶은 욕심이 앞서기 때문이다.</p><p>두번째는 부족한 자기제시의 기대감이다. 즉 내가 상대방에게 잘 보일 수 있다는 자신감이 적을수록 소통불안은 증가한다. 꼭 합격하고 싶은 좋은 회사의 면접 시험에는 나 말고도 우수한 지원자가 많을 테니 내가 잘 보이기 힘들 것이라는 자신감의 저하가 불안감을 가중시킨다. 중요한 프레젠테이션, 꼭 친해지고 싶은 친구, 이성 앞에서도 자신감이 낮아지면서 불안감은 증폭된다.</p><p>소통불안을 감소시키려면 이러한 원인을 없애거나 줄이면 된다. 즉 타인에게 잘 보이려는 욕심이 높을수록, 그리고 잘 보일 수 있다는 자신감이 적을수록 소통에 대한 불안감은 커진다. 따라서 소통불안을 줄이기 위해서는 잘 보이려는 욕심을 낮추고, 잘 보일 수 있다는 자신감을 키우면 된다. 중요한 면접이나 프레젠테이션을 앞두고 불안감이 증가된다면 우선 욕심을 버리고 마음을 비워야 한다. 자신의 모습을 있는 그대로 보여줘도 충분하다는 자신감을 지녀야 한다.</p><p>타인의 시선에 과민하게 반응하는 것은 소통능력 향상에 도움이 되지 않는다.</p><h5 id="나를-표현하는-두-가지-길"><a href="#나를-표현하는-두-가지-길" class="headerlink" title="나를 표현하는 두 가지 길"></a>나를 표현하는 두 가지 길</h5><p>결국 중요한 것은 두 가지다. 하나는 자기를 어느 정도 높이고 잘난 체하는 ‘자기높임’이고,</p><p>다른 하나는 자기를 낮추고 겸손을 떠는 ‘자기낮춤’이다.</p><p>자기높임은 자칫하면 거만하고 잘난 척이 되어 존경도 사랑도 잃게 된다. 하지만 자기높임 없이는 우리의 유능함과 강점을 드러낼 길이 없다. 자기낮춤은 겸손이나 겸양으로 나타나 다른 사람의 호감을 얻기에는 유리하지만, 역시 지나치면 자신감이 없어 보이거나 비굴하게 보일 우려가 있다. 적당한 수준의 자기높임과 자기낮춤의 조합이 중요한데, 이 적당한 비율은 다양한 인간관계의 구체적인 맥락 속에서 결정된다. 그리고 이 다양한 관계적 맥락에 따른 자기높임과 자기낮춤의 적절한 비율을 찾아내는 능력이 소통능력의 핵심적 요소다.</p><p>자기과시와 겸양의 효과는 인간관계의 종류와 소통에 따라 다르게 나타난다. 서로 잘 모르는 사이에는 자신의 유능함을 적절히 표현하는 것이 호감과 존중심을 얻는 데 도움이 된다. 반면, 친한 친구 사이일수록 잘난 척은 금물이다. 친할수록 겸손함이 사랑과 존중심을 얻는데 도움이 된다. 그런데 많은 사람들은 이와 반대로 한다. 모르는 사람 앞에서 겸손을 떨고 친한 친구 앞에서 잘난 체를 하는 식이다.</p><p>상대방과 내가 어떠한 관계이고 상대방이 원하는 나의 바람직한 이미지가 무엇인지를 빨리 간파해내는 것이 효과적인 자기제시의 핵심이다.</p><p>오히려 학생들은 좀 과하다 싶을 정도로 잘난 척하는 교수를 유능하다고 평가했을 뿐만 아니라 더 높은 호감도마저 보였다. 학생들은 교수에게 무언가 배우기 위해 교실에 있는 것이다. 그만큼 자신의 유능함과 지식에 대해 자연스럽게 드러내는 것이 존중심과 호감을 모두 얻을 수 있는 방법인 것이다.</p><h4 id="2-공감을-이해하고-경청을-훈련하라-공감-능력"><a href="#2-공감을-이해하고-경청을-훈련하라-공감-능력" class="headerlink" title="2. 공감을 이해하고 경청을 훈련하라: 공감 능력"></a><strong>2. 공감을 이해하고 경청을 훈련하라: 공감 능력</strong></h4><p>우리가 다른 사람의 경험을 바라보는 것만으로도 그 사람과 비슷하게 경험하게 된다는 것을 의미한다. 신경과학에서는 이러한 뇌의 시스템을 거울신경계라 부른다. 다른 사람의 경험을 뇌가 마치 거울처럼 반사한다는 의미다. 이처럼 나의 경험과 다른 사람의 경험ㅇ르 인간의 뇌는 상당히 비슷하게 받아들인다. 인간의 뇌는 본래 사회적이기 때문이다. 이러한 사회적 뇌가 공감의 근원이며, 우리가 서로 소통하고 이해할 수 있는 기반이 된다.</p><p>공감능력을 높이기 위해서는 MPFC 부위를 활성화시키는 노력을 해야 한다. 그런데 MPFC는 내가 자신에 대해서 생각할 때, 혹은 아무런 생각 없이 차분히 있을 때에 활성화되므로, 공감능력이 낮은 사람들은 때때로 차분히 앉아서 자기 자신을 돌이켜보는 반성 혹은 명상의 시간을 갖는 것이 도움이 된다. 감정이나 내 생각의 흐름을 스스로 돌이켜보는 것만으로도 뇌는 공감능력과 역지사지의 능력을 발휘할 준비를 갖추게 된다. 자기이해지능과 대인관계지능은 이처럼 밀접하게 연관되어 있다.</p><p>감정 유발-&gt;신체 변화-&gt;감정 인식의 순서를 겪게 된다.</p><p>부정적 감정도 마찬가지다. 분노라는 감정이 유발되어 심장박동과 표정 근육 등에 변화가 먼저 생기게 되고, 이러한 신체적 변화를 뇌가 감지하여 화났다는 사실을 깨닫게 되는 것이다. 그렇기에 즐거워서 웃는다기보다는 웃기 때문에 즐거운 것이며, 화가 나서 인상 쓴다기보다는 인상 쓰고 화내기 때문에 분노를 느끼게 되는 것이다.</p><p>감정의 유발과 감정의 인지 사이에 이처럼 신체의 변화가 개입되어 있기 때문에 신체 조절을 통해 감정을 조절할 수도 있다. 대표적인 것이 호흡조절이다. 긴장하게 되면 호흡이 얕고 빨라져서 어깨 근육이나 얼굴 근육이 경직되어 우리의 뇌는 긴장하였다는 것을 느끼게 된다. 하지만 이때 근육의 긴장을 풀고 천천히 호흡하거나 복식 호흡을 하게 되면 긴장의 정도가 상당히 완화된다.</p><p>긍정적 정서도 마찬가지다. 긍정적 정서를 뇌에 유발시키는 가장 간단한 방법은 그냥 웃는 것이다. 웃는 표정을 짓게 되면 뇌는 즐겁고 기분 좋다고 느끼게 되며, 쉽게 긍정적 정서에 돌입할 수 있는 상태가 된다. 웃음과 관련된 근육이 수축되기만 해도, 뇌는 우리가 웃는다고 판단하고는 긍정적 정서와 관련된 도파민을 분비하게 된다.</p><p>일상생활에서 원만한 대인관계를 원한다면 우선 마음의 문을 열고 상대방의 말을 잘 들어야 한다. 우선 상대방의 말을 들을 때에는 말하는 사람의 표정을 그대로 따라하는 습관을 들이도록 한다. 위에서 살펴본 것처럼 인간의 얼굴 근육은 감정에 관여하는 뇌와 직접 연결되어 있다.</p><h4 id="3-깊고-넓은-인간관계를-유지하라-자아확장력"><a href="#3-깊고-넓은-인간관계를-유지하라-자아확장력" class="headerlink" title="3. 깊고 넓은 인간관계를 유지하라: 자아확장력"></a><strong>3. 깊고 넓은 인간관계를 유지하라: 자아확장력</strong></h4><p>자아확장력? 자기 자신이 다른 사람과 연결되어 있다고 느끼는 정도.</p><p>자아확장력이 높은 사람은 자아 개념 속에 타인과의 관계에 대한 전제가 깊이 내재되어 있다. 즉 자기 자신에 대해 생각할 때 이미 타인과의 관계 속에서 자기 자신을 이해하는 것이다. 동서고금을 막론하고 자아확장력은 인간의 도덕적 기본 속성으로 파악되어왔으며, 자아확장력의 향상은 익나 교육의 기본 목표였다.</p><p>최근 긍정심리학의 연구 결과들을 보면, 자아확장력의 근본은 긍정적 정서다. 긍정적 정서만이 사람들을 하나로 묶어준다. 심리학자 바바라 프레드릭슨에 따르면 긍정적 정서는 타인과 내가 하나되는 느낌을 강하게 해주는 원동력이다. 기쁨, 즐거움 등의 긍정적 정서가 충만한 사람들은 주변 사람들과 자신을 일치시키는 -커다란 하나의 덩어리로 느끼는- 느낌을 강하게 갖게 된다는 것이다.</p><p>아론과 아론은 ‘자아확장이론’을 제안하면서 친밀한 관계란 ‘상대방을 나의 자아개념에 포함시키는 것’이라는 대담한 제안을 하고 이를 이론화했다. ‘나’라고 생각하는 자아의 개념 속에 상대방을 포함시키는 것, 혹은 ‘나’라는 범주를 넓히고 확장시켜서 상대방이 그 안에 포함될 수 있게 하는 것이 진정으로 친밀한 관계라는 것이다. 그렇기에 아론과 아론은 사랑을 ‘자아의 확장’이라고 정의내린다. 이 이론에 따르면 진정한 인간관계는 상대방을 ‘나’라는 개념 안에 포함시킴으로써 가능해진다. 이는 또한 인간관계를 제대로 맺으려면 나의 자아개념을 확장시킬 수 있는 능력이 필요하다는 뜻이기도 하다.</p><p>이러한 실험 결과는 자아확장력이 높은 사람은 세상사를 바라보는 관점이 다르다는 것을 암시한다. 보다 높은 자아확장력을 지닌 사람은 자신의 입장에서 바라보는 관점과 타인의 입장에서 바라보는 관점에 커다란 차이가 없다. 즉 타인에게 벌어지는 일들도 마치 내게 벌어지는 일처럼 인지적으로 받아들이고 처리하게 된다. 이런 사람들은 당연히 타인을 더 배려하게 된다. 이러한 ‘배려’는 의식적인 노력을 통해서라기보다는 자아확장력이 높은 ‘타인과 나를 동일시하는’ 뇌의 자연스런 반응인 셈이다.</p><p>톨스토이의 소설 &lt;사람은 무엇으로 사는가&gt; 의 한 구절.</p><blockquote><p>“모든 사람은 자신을 보살피는 마음에 의해 살아가는 것이 아니라 사랑으로써 살아간다. 내가 인간이 되고 나서 무사히 살아갈 수 있었던 것은 내가 내 자신의 일을 여러 가지로 걱정했기 때문이 아니라 다른 사람들이 나를 사랑해주었기 때문이다. 모든 인간이 살아가는 것도 모두가 각자 자신의 일을 걱정하기 때문이라기보다는 그들 사이에 사랑이 있기 때문이다. 이제야말로 나는 깨달았다. 모두가 자신을 걱정함으로써 살아갈 수 있다고 생각하는 것은 다만 인간들이 그렇게 생각하는 것일 뿐, 사실은 사랑에 의해 살아가는 것이다. 사랑 속에 사는 자는 하느님 안에 살고 있다. 하느님은 사랑이시다”</p></blockquote><h5 id="친구-관계의-중요성"><a href="#친구-관계의-중요성" class="headerlink" title="친구 관계의 중요성"></a>친구 관계의 중요성</h5><p>친구를 얻는 가장 쉬운 방법은 다른 사람에게 관심을 기울이는 것이다. 관심을 끌려고 애쓰는 2년보다 다른 사람에게 관심을 보이는 2개월 동안 더 많은 친구를 얻을 수 있다. 배려하고 관심을 표명하는 것을 배워야 한다. 여자들은 쉽게 속내를 털어놓고 정신적 지지를 통해 친해지며 그들의 우정을 유지할 수 있지만 남자들은 속내를 털어놓기가 힘들다.</p><p><br></p><h2 id="회복-탄력성을-높이기-위해-해야-할-일"><a href="#회복-탄력성을-높이기-위해-해야-할-일" class="headerlink" title="회복 탄력성을 높이기 위해 해야 할 일"></a>회복 탄력성을 높이기 위해 해야 할 일</h2><h3 id="1-긍정적-뇌로-변화시켜라"><a href="#1-긍정적-뇌로-변화시켜라" class="headerlink" title="1. 긍정적 뇌로 변화시켜라."></a>1. 긍정적 뇌로 변화시켜라.</h3><p>강한 회복탄력성을 지니기 위해 필요한 것은 두 가지다. 하나는 자기조절능력, 다른 하나는 대인관계능력이다. 그리고 이 두가지를 길러주는 것은 바로 긍정적 정서다. 긍정적 정서를 키운다는 것은 곧 스스로 행복해짐으로써 자기통제력을 높인다는 뜻이고, 자신의 행복을 타인에게 나눠줌으로써 대인관계 능력을 향상시킨다는 뜻이다.</p><p>행복은 능력이다.</p><p>행복은 긍정적 정서를 통해 자신을 자기가 원하는 방향으로 이끌어 갈 수 있는 능력이며, 또한 타인에게 행복을 나눠줌으로써 원만한 인간과계와 성공적인 삶을 일구어내는 능력이다. 스스로 행복하고 남을 행복하게 해줄 수 있는 긍정적 정서의 소유자가 강한 회복탄력성을 지니게 마련이다. 긍정적 정서를 지닌다는 것은 뇌를 긍정적인 뇌로 바꿔야 한다는 뜻이다.</p><h3 id="2-행복의-기본-수준을-높여야-한다"><a href="#2-행복의-기본-수준을-높여야-한다" class="headerlink" title="2. 행복의 기본 수준을 높여야 한다."></a>2. 행복의 기본 수준을 높여야 한다.</h3><p>길버트 교수는 특정한 사건이 미래의 행복감이나 불행감에 미칠 영향을 사람들이 지나치게 과대평가 한다는 것을 밝혀냈다. 예컨대 미국 대학의 젊은 교수들은 정년보장 심사를 받기 전에는 정년보장 심사가 자신의 삶을 근본적으로 바꾸어 놓을 것이라고 확신한다는 것이다. 그러나 막상 정년보장 심사가 지나가고 수 개월만 지나면 심사에 통과했던 사람이나 통과하지 못 했던 사람이나 자신의 원래 행복 수준으로 되돌아 간다는 것을 길버트 교수는 발견해냈다.</p><p>어디 정년보장 심사를 앞둔 교수뿐이겠는가. 살아가면서 우리는 이러한 착각에 종종 사로 잡힌다. 지금 원하는 것만 이루면 상당히 행복해질 것 같은 착각 말이다. 대학 입학만을 바라는 고3 수험생들. 고시원에 틀어박혀 외신상담하는 고시생. 임원 승진을 앞둔 회사원. 장군승진을 앞둔 군인. 로또 당첨을 간절히 바라는 사람들. 이들은 모두 자신이 원하는 것만 이루어지면 영원히 행복할 거라는 환상에 사로잡히게 된다. 그러나 길버트 교수는 이 모든 것이 환상에 불과하다는 사실을 보여준다. 원하는 것을 얻게 되든 얻지 못하든 간에 우리는 얼마간의 시간이 지나면 다시 원래의 행복 수준으로 되돌아오고 만다.</p><p>인생에서 일어나는 일들은 기껏해야 일시적으로 우리를 행복하게 혹은 불행하게 만들 뿐이다. 일정한 시간이 지나면 우리는 곧 다시 자신의 본래 행복 수준으로 되돌아오는 강한 탄력성을 지녔다. 심리학자들은 이를 행복의 자동온도조절장치 라 부른다.</p><p>따라서 더 행복해지기 위해서는 각자 자신의 행복의 기본 수준을 끌어올려야 한다. 긍정적 정서의 훈련을 통해 긍정적인 뇌로 변화시킨다는 것은 바로 이 행복의 기본 수준을 끌어올린다는 뜻이다. 행복의 기본 수준을 끌어올려야만 긍정적 정서의 지속적인 향상이 가능해지고 결국 회복탄력성이 높아진다.</p><p>행복의 기본 수준이 높은 사람을 우리는 낙관적인 사람이라 부른다. 낙관성이 높은 사람들은 주어진 상황은 언젠가 좋아지리라른 믿음을 지닌 사람들이다. 신체적으로도 더 건강하고 우울증에도 덜 걸린다. 성취도도 더 높고 업무 생산성도 높다. 그러나 낙관성은 객관적인 위험성을 과도하게 평가절하하는 비현실적인 낙천주의와는 다르다.</p><p>낙관성을 지닌 사람은 무엇인가를 해낼 수 있다는 스스로에 대한 믿음이 있으며, 자신의 한계 밖으로, 일상 너머로 뻗어나가려는 적극적인 자세를 지닌다. 낙관성은 새로운 것에 대한 도전을 두려워하지 않게 해며, 익숙한 현실과 반복적인 일상에 안주하기를 거부하고 새로운 영역으로 스스로를 확대시켜 나가려는 자세를 유지시켜준다.</p><p>낙관성이 부족하고 비관적인 사람들의 가장 큰 특징은 타인의 부정적 시선을 지나치게 두려워한다는 점이다. 주변 사람 모두가 나만을 바라보고 나를 흉보고 비웃는 것 같은 착각에 사로잡히게 되면서 비관성은 급속히 증가하게 된다.</p><p>인간관계에서 많은 문제를 지닌 사람들은 대체로 이러한 비관성을 갖고 있다. 짜증이 많고, 화를 잘내고, 자신감이 없고, 지나친 우월감과 열등감을 순식간에 오가는 사람들의 특징은 타인의 시선에 대해 지나치게 예민하다는 공통점을 갖고 있다. 긍정적인 사람은 다른 사람들이 나를 바라보고 있다고 느끼면 오히려 더 힘이 나고 신나고 더 큰 능력을 발휘하게 된다. 그러나 부정적인 사람은 다른 사람들이 나를 …</p><p>타인의 시선에 지나치게 민감한 사람들은 1만 원권 지폐 이야기를 생각해야 한다. 지폐의 가치는 밟아도, 구겨져도, 심지어 찢어져도 그대로다. 변하지 않는다. 즉, 다른 사람이 무어라 해도 나는 그저 나일뿐이라는 점을 명심해야 한다. 타인이 나를 비난하고 흉본다고 해서 나의 가치나 존재 자체가 변하는 것은 아니다. 이런 사람들일수록 주관이 뚜렷한 자유로운 영혼으로 거듭나도록 스스로 노력해야 한다. 자유로운 사람이 강한 사람이다.</p><p>낙관적이고 긍정적인 사람은 높은 수준의 자율성과 자기효능감을 지니기 마련이며 따라서 통재 소재를 흔히 자기 안에서(네가 -혹은 그것이, 혹은 그 삶이, 난 어쩔 수 없어 등의 수동적인 스토리텔링을 하는 사람이 아닌 반대의 사람) 찾는다. 내가 노력하면 지금 벌어지는 일들을 내가 원하는 방향으로 이끌 수 있다는 자신감을 지니고 있다는 뜻이다. 이런 사람들이야말로 자기 자신의 삶을 능동적으로 이끄는 사람이다.</p><h3 id="3-자신의-대표-강점을-발견하라"><a href="#3-자신의-대표-강점을-발견하라" class="headerlink" title="3. 자신의 대표 강점을 발견하라."></a>3. 자신의 대표 강점을 발견하라.</h3><p>최근의 긍정심리학의 연구 성과는 약점에 집중하기보다는 강점에 집중해야 함을 역설하고 있다. 인류 역사를 돌이켜보면 훌륭한 업적을 남긴 사람들은 자신의 강점에 집중해서 그것을 더욱 발전시킨 사람들이라는 것을 금방 알 수 있다. 올림픽 금메달리스트나 노벨상 수상자들은 말할 것도 없고 학문이나 문화 예술 분야에서 뛰어난 창의적 업적을 남긴 사람들은 모두 자신의 장점에 집중해서 그것을 더욱더 키워나갔다는 공통점을 갖는다.</p><p>무엇보다도 진정한 행복의 핵심은 자신의 강점을 발견하고 그것을 발휘하며 살아가는 것이다. 자신이 잘할 수 있는 일을 통해 즐거움과 성취와 보람을 느끼는 것이야말로 진정 행복한 삶이다. 강점을 발휘하는 삶을 통해서 우리는 행복의 기본 수준을 점차 끌어올릴 수 있다.</p><p>나의 발전의 기준은 내 주위 사람들이 아니라 오늘의 나다. 지금 이 순간의 긍정성 수준보다 앞으로의 긍정성 수준과 회복탄력성이 꾸준히 높아지는 것을 목표로 삼으면 된다. 회복탄력성의 향상을 위한 긍정성 훈련 중에서 가장 포괄적이고 과학적으로 입증된 것이 바로 덕성과 강점의 개발이다.</p><p>셀리그만 교수에 의하면 행복의 기본 수준을 향상시키기 위해서는 자신의 고유한 강점이 무엇인지 깨닫고 그것을 일상생활 속에서 꾸준히 수행하려는 노력을 해야만 한다. 강점 수행을 통해서만 진정한 발전이 있을 수 있으며 긍정적인 뇌를 만들어갈 수 있다. 역경과 시련을 이겨내고 뛰어난 성취와 위대한 업적을 이뤄낸 사람들의 공통적인 특징은 어려서부터 자신의 강점에 집중하고 끊임없이 키워나갔다는 데 있다. 이것이 긍정심리학의 가장 중요한 발전이다.</p><p>셀리그만 교수에 따르면 부부나 연인관계에서 절대 갈라서지 않는 비법은 상대방의 강점을 발견하고 그것을 발휘하도록 도와주는 것이다 - 만약 헤어지고 싶다면 반대로 하면 된다. 서로의 약점을 들춰내서 공격하면 된다. 만약 배우자나 연인이 그림 그리는 것이나 악기 다루는 것을 좋아하는 강점을 지녔다면 그림이나 악기를 배울 수 있도록 적극 도와주고 격려해주어야 한다. 호기심과 학습욕구의 강점을 지닌 배우자에게는 강연도 듣고 책도 사볼 수 있도록 배려하고 도와주면 된다. 상대방의 강점이 무엇인지 서로 파악하고자 노력하고 그것을 일상생활 속에서 발휘할 수 있도록 배려하는 부부나 연인은 절대 헤어지는 일이 없을 거라고 셀리그만 교수는 단언한다. 이러한 주장은 지난 수십 년간 수천 쌍의 부부와 연인에 대한 연구를 수행한 존 고트만 교수의 연구 결과와도 일치하는 것이다.</p><p>강점의 발견과 발휘는 또한 멘토가 멘티에게 해줘야 할 핵심적인 일이기도 하다. 강점의 발견과 발휘는 한 인간이 성장해가는 본질적인 방식이다. 일찍이 매슬로우가 설파했듯이, 인간은 성장할 수 있고 성장의 가능성이 보일 때에만 행복해질 수 있다. 부하 직원이나 동료의 강점을 발견하고 그것을 발휘할 수 있도록 도와준다면 당신은 어느 조직에서든지 진정한 리더가 될 수 있을 것이다. 자신의 강점을 발견해주고 그로 인해 성장할 수 있도록 도와주는 상사를 만나게 된다면, 직원은 분명 마음속 깊이 그 상사를 존경하게 될 것이고 평생토록 충성하게 될 것이다. 자기 자신을 진정으로 행복하게 해주었기 때문이다. 실제로 진심 어린 충성은 모두 이러한 과정을 통해 생겨난다. 일시적인 환심으로는 진심 어린 충성심이 생기기 어렵다.</p><h3 id="4-회복탄력성-향상을-위한-두-가지-습관"><a href="#4-회복탄력성-향상을-위한-두-가지-습관" class="headerlink" title="4. 회복탄력성 향상을 위한 두 가지 습관"></a>4. 회복탄력성 향상을 위한 두 가지 습관</h3><p>마음과 몸에 들이는 두 가지 좋은 습관. 하나는 ‘감사하기’로 이는 마음의 좋은 습관이고, 다른 하나는 ‘운동하기’로 이는 몸에 좋은 습관이다. 감사하기와 규칙적인 운동이 인간을 긍정적으로 변화시킨다는 것은 우리 모두가 다 아는 상식이다. 그러나 감사와 운동이 어떠한 과정을 통해 우리의 뇌를 긍정적인 뇌로 변화시키는가에 대해서는 극히 최근에 밝혀지기 시작했다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/01/21/review-books-6/99594C335A09A76615.png&quot;&gt;
&lt;h4 id=&quot;회복탄력성&quot;&gt;&lt;a href=&quot;#회복탄력성&quot; class=&quot;headerlink&quot; title=&quot;회복탄력성&quot;&gt;&lt;/a&gt;회복탄력성&lt;/h4
      
    
    </summary>
    
      <category term="Review" scheme="https://devist.github.io/categories/review/"/>
    
      <category term="Books" scheme="https://devist.github.io/categories/review/books/"/>
    
    
      <category term="독서" scheme="https://devist.github.io/tags/%EB%8F%85%EC%84%9C/"/>
    
      <category term="책" scheme="https://devist.github.io/tags/%EC%B1%85/"/>
    
      <category term="Book" scheme="https://devist.github.io/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>독서기록) 스물아홉 생일, 1년 후 죽기로 결심했다</title>
    <link href="https://devist.github.io/2019/01/21/review-books-5/"/>
    <id>https://devist.github.io/2019/01/21/review-books-5/</id>
    <published>2019-01-21T12:13:01.000Z</published>
    <updated>2019-01-21T12:49:21.978Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/01/21/review-books-5/2728C1465947F5B50C.jpeg"><p><br></p><p>내 나이 스물아홉. </p><p>나처럼 누군가는 스물아홉살이 될테고, 스물아홉일테고, 스물아홉이었을 것이다. </p><p>그들은 어떤 스물아홉을 보낼 것이며, 또 어떻게 보냈을까?</p><p>이런 물음이 떠올랐던 건 이 책, ‘스물아홉 생일, 1년 후 죽기로 결심했다.’ 라는 제목을 보고난 뒤였다.</p><p><br></p><p>스물아홉이라는 건 참 많은 생각을 하게 하는 나이다. </p><p>열 아홉에는 스무 살에 대한 막연한 불안감, 설렘, 기대감, 흥분 등이 공존하는, </p><p>미지의 미래에 대한 기대로 가득찼다.</p><p><br></p><p>그러나 스물 아홉인 지금, 열 아홉의 그 것과는 다르다. </p><p>우선 그렇게 스무 살을 손꼽아 기다리던 열 아홉과 달리, </p><p>서른에 대한 약간의 거부감과 걱정으로 시간이 조금만 더 더뎠으면 생각한다. </p><p>또한, 서른만 바라보는 것이 아닌 지난 시간을 돌아보게 된다. </p><p>책의 주인공 하야마 아마리 또한 스물 아홉에 그런 고민을 했고, </p><p>안타깝게도 고민 끝에 자신이 쓸모 없으며, 돌아볼 지난 시간에서조차 아무런 아련하고 그리운 경험을 찾지 못한다.</p><p>책의 도입부를 읽으며 오랜만에 생각했고, 나를 돌아봤으며, 끝내 우울해졌다. </p><p>항상 무언지 모를 그 어떤 것을 붙잡고자 방법도 모른 채 끊임없이 부딪히고 달려왔지만, </p><p>나 또한 상황이 크게 다르지 않음을 깨달았기 때문이다.</p><p><br></p><p>그러나 책의 마지막 장을 덮으며,</p><p>다시 한 번 무언지 모를 그 어떤 것을 붙잡고자 다시 한 번 부딪쳐보고 싶어진다.</p><ul><li>목표를 만들고, 이를 이루기 위한 계획을 세우고, 이를 현실화시키기 위한 전에 없던 용기를 내고 싶다.</li><li>기적을 바라므로, 발가락부터 움직이고 싶다.</li><li>가진건 없지만 할 수 있는 것까지 없는 건 아니므로 무언갈 하고 싶다.</li><li>‘자기무대’를 가짐으로써 ‘자기무대’를 가진 사람 특유의 자신감과 지속적인 당당함을 갖고 싶다.</li><li>지나가보지 않음으로써 생긴 두려움의 막을 뚫고, 그 뒤에 펼쳐진 또 하나의 여전히 아무렇지도 않은 또 하나의 평범한 세계를 경험하고 싶다.</li></ul><p><br></p><p>이 책이 고맙다.</p><p>어느 평범한 아무 생각 없던 스물 아홉살에게, 돌아보고 바라보는 사색의 시간을 갖게 해줬다. </p><p>에세이나 자기계발서는 우리가 모르는 새로운 내용을 알려주지 않는다.</p><p>다만 다시 한 번 삶에 있어 중요한 것을 상기시키고 다시금 ‘싶어지게’ 만드는 매력이 있다.</p><p><br></p><p>목표의 구체성, 그리고 시한부 목표의 힘을 기억하고 실천해나가야겠다.  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/01/21/review-books-5/2728C1465947F5B50C.jpeg&quot;&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;내 나이 스물아홉. &lt;/p&gt;
&lt;p&gt;나처럼 누군가는 스물아홉살이 될테고, 스물아홉일테고, 스물아홉이었을 것이다. 
      
    
    </summary>
    
      <category term="Review" scheme="https://devist.github.io/categories/review/"/>
    
      <category term="Books" scheme="https://devist.github.io/categories/review/books/"/>
    
    
      <category term="독서" scheme="https://devist.github.io/tags/%EB%8F%85%EC%84%9C/"/>
    
      <category term="책" scheme="https://devist.github.io/tags/%EC%B1%85/"/>
    
      <category term="Book" scheme="https://devist.github.io/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>독서기록) 숨결이 바람 될 때</title>
    <link href="https://devist.github.io/2019/01/21/review-books-4/"/>
    <id>https://devist.github.io/2019/01/21/review-books-4/</id>
    <published>2019-01-21T12:12:57.000Z</published>
    <updated>2019-01-21T12:39:51.352Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/01/21/review-books-4/234F0A3558EA20BA14.png"><p>촉망받는 신경외과 레지던트 의사 폴 칼라니티가 죽음에 직면한 후 기록한 내용을 담은 책이다. 삶과 죽음에 관해 깊은 관심을 갖고 수 많은 이들의 죽음을 지켜보던 의사가, 아이러니하게도 이른 나이에 죽음에 직면하게 된다. 숨결이 바람될 때는, 인생의 목적에 대해서, 삶에 대해서 오랜만에 고민해볼 수 있는 시간을 갖게 해주었다. </p><p>오랜만에 다시 읽고 싶은, 소장하고 싶은 책을 만났다.</p><p><strong>책 속의 문장들</strong></p><blockquote><p>“우리는 어느 날 태어났고, 어느 날 죽을 거요. 같은 날, 같은 순간에. 여자들은 무덤에 걸터앉아 아기를 낳고, 빛은 잠깐 반짝이고, 그러고 나면 다시 밤이 오지.” 나는 ‘겸자’를 든 ‘무덤 파는 사람’ 옆에 서 있었던 셈이다. 쌍둥이의 삶은 결국 무엇이었을까?</p></blockquote><blockquote><p>“잘 모르겠습니다. 내가 아는 건, 그리고 물론 당신도 잘 알겠지만, 당신의 삶이 이제 막, 아니, 이미 변했다는 겁니다. 앞으로 기나긴 싸움이 될 거예요. 남편분도 잘 들으세요. 서로를 위해 자기 자리를 잘 지켜줘야겠지만 필요할 때는 꼭 충분히 쉬어야 합니다. 이런 큰 병을 만나면 가족은 하나로 똘똘 뭉치거나 분열하거나 둘 중의 하나가 되죠. 그 어느 때보다 지금 서로를 위해 각자의 자리를 잘 지켜야 해요. 아이 아버지나 어머니가 침대 곁에서 밤을 새우거나 하루종일 병원에 있는 일은 없었으면 합니다. 아시겠죠?”</p></blockquote><blockquote><p>큰 병은 환자는 물론이고 가족 전체의 삶을 바꾸어놓는다. 하지만 뇌 질환은 거기에 난해하고 신비한 분위기가 더해진다. 아들의 죽음만으로도 부모의 정돈된 세계는 뒤집혀버린다. 그런데 환자의 뇌는 죽었고 몸은 따뜻하고 심장도 여전히 뛰고 있다니, 이보다 더 이해할 수 없는 일이 있을까? 재앙(disaster)이라는 단어의 어원은 부서지는 별을 의미하는데, 신경외과의의 진단을 들었을 때 환자의 눈빛이 바로 그렇다.</p></blockquote><blockquote><p>‘나는 계속 나아갈 수 없어.’ 라고 생각하는 순간, 그에 대한 응답이 떠올랐다. 그건 내가 오래전 학부 시절 배웠던 사뮈엘 베케트의 구절이기도 했다. “그래도 계속 나아갈 거야.” 나는 침대에서 나와 한 걸음 앞으로 내딛고는 그 구절을 몇 번이고 반복했다. “나는 계속 나아갈 수 없어, 그래도 계속 나아갈 거야(I can’t go on. I’ll go on).”</p></blockquote><blockquote><p>궁극적인 진리를 향해 열심히 나아가되 거기에 닿는 것은 불가능하다는 걸, 혹은 가능하다 해도 확실히 입증하는 건 불가능하다는 걸 인지하고 있어야 한다. 결국 우리 각자는 커다란 그림의 일부만 볼 수 있을 뿐이다. 의사가 한 조각, 환자가 다른 조각, 기술자가 세 번째, 경제학자가 네 번째, 진주를 캐는 잠수부가 다섯 번째, 알코올 중독자가 여섯 번째, 유선 방송 기사가 일곱 번째, 목양업자가 여덟 번째, 인도의 거지가 아홉 번째, 목사가 열 번째 조각을 보는 것이다. 인류의 지식은 한 사람 안에 담을 수 없다. 그것은 우리가 서로 맺는 관계와 세상과 맺는 관계에서 생성되며, 결코 완성되지 않는다. 그리고 궁극적인 진리는 이 모든 지식 위 어딘가에 있다.</p></blockquote><blockquote><p>오늘과 내일을 거의 구분할 수 없게 되자, 시간이 정지된 것처럼 느껴지기 시작했다. 영어에서 우리는 시간(time)이라는 단어를 서로 다른 방식으로 사용한다. “지금 시각(time)은 두시 사십오 분이다.” 라고 말할 수도 있고, “나는 힘든 시간(time)을 보내고 있다.”라고 말할 수도 있다. 요즘에는 전자보다는 후자처럼 느껴진다. 나는 무기력해졌고, 더 너그러워진 것 같다.</p></blockquote><blockquote><p>“진정한 용기를 보려는 자가 있다면 / 이리로 오게 하라 / 그러면 환상은 사라지고 / 그는 사람들이 하는 말을 두려워하지 않을 것이다. / 그는 밤낮을 가리지 않고 노력하여 / 순례자가 되고자 할 것이다.” 죽음을 정명으로 바라보겠다는 폴의 결단은 삶의 마지막 순간에 그가 어떤 사람이었는지 증명할 뿐만 아니라, 그의 인생 자체가 어떠했는지를 보여주는 증거이다.</p></blockquote><blockquote><p>“How Long Have I Got Left?” - New York Times 읽어보기</p></blockquote><blockquote><p>의사 에마 헤이워드는 암에 걸린 사람들은 대체로 두 가지 반응을 보인다고 말한다. 하나는 평소에 하던 일을 집어치우고 칭병하며 아무것도 안 하는 절망적인 태도이고, 다른 하나는 오히려 그 병 때문에 더욱 평소 하는 일에 몰두하는 긍정적인 태도가 그것이다. 칼라니티는 후자의 태도를 보인다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/01/21/review-books-4/234F0A3558EA20BA14.png&quot;&gt;
&lt;p&gt;촉망받는 신경외과 레지던트 의사 폴 칼라니티가 죽음에 직면한 후 기록한 내용을 담은 책이다. 삶과 죽음에 관해 깊은 관심을 갖고 수 많
      
    
    </summary>
    
      <category term="Review" scheme="https://devist.github.io/categories/review/"/>
    
      <category term="Books" scheme="https://devist.github.io/categories/review/books/"/>
    
    
      <category term="독서" scheme="https://devist.github.io/tags/%EB%8F%85%EC%84%9C/"/>
    
      <category term="책" scheme="https://devist.github.io/tags/%EC%B1%85/"/>
    
      <category term="Book" scheme="https://devist.github.io/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>독서기록) 어떻게 일하며 성장할 것인가</title>
    <link href="https://devist.github.io/2019/01/21/review-books-3/"/>
    <id>https://devist.github.io/2019/01/21/review-books-3/</id>
    <published>2019-01-21T12:12:54.000Z</published>
    <updated>2019-01-21T12:31:17.018Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/01/21/review-books-3/2755A14B5886040729.png"><p>직장인이라면 한 번쯤 읽어보면 좋을만한 책, ‘어떻게 일하며 성장할 것인가’는, 특히 다음과 같은 사람들에게 추천해주고 싶다.</p><ul><li><p>대학을 졸업하고 첫 직장에 발을 떼는 신입사원들</p></li><li><p>이직을 꿈꾸는, 이직을 한 사람들</p></li></ul><p>초등학교, 중학교, 고등학교, 대학교까지. 학생 신분으로서 학교뿐만 아니라 영화관, 음식점, 놀이공원, 학원 등등 항상 ‘돈을 내는 입장’에 있는 신분에서, 처음으로 ‘돈을 받는 입장’인 직장인이 되는 것. 이것은 우리가 생각하는 것 이상으로 많은 차이를 가지고 있으며 쉽지 않은 일임에 분명하다. 저자 또한 그렇기 때문에 고3에서 대학생이 되는 것보다, 대학생에서 직장인으로 변화하는 시기를 인생에서 더 중요하다고 보고 있다. 돈을 내는 입장에서 돈을 받는 입장으로의 변화를 인지하지 못한 채로, 그렇게 들어가고 싶었던 회사에 입사해서 몇 달 지나지 않아 뛰쳐나가는 사람이 많다. 그러지 않기 위해서라도, 혹은 한 번 정도 제대로 고민해본 후에 뛰쳐나가기 위해서, 한 번쯤 읽어보면 많은 도움이 될 것 같다.</p><p>이직을 꿈꾸는, 이직을 한 사람들 중에는 분명 심도 있게 자신을 돌아보거나, 본인의 회사를 돌아보는 시간을 갖지 못한 채로 막연하게 이직을 떠올리는 사람이 더러 있을 것이다. 나 또한 그 중 하나였다. 이 책은 이직하기 전에, 이직 후 새로운 회사에서 시작하기 전에, 자신을 돌아볼 기회를 제공하며 조금 더 심도 있게 고민할 수 있도록 함께 질문하고 답해준다. 책의 모든 내용에 공감할수도, 100% 동의하지 못하지는 못했다. 그러나 책에 나오는 질문과 오랜 직장 경험이 있는 저자의 생각은, 직장인으로서의 본인을 만드는 데 반드시 도움이 될 것이라는 것만은 분명했다.</p><p>이 책은 다음과 같은 11개의 질문들이 소제목으로 이루어져 있다.</p><ul><li>당신은 누구인가?</li><li>어떻게 일할 것인가?</li><li>월급은 무엇인가?</li><li>누가 승진하는가?</li><li>누가 실력자인가?</li><li>왜 경쟁이 필요한가?</li><li>왜 공부해야 하는가?</li><li>어떻게 변화해야 하는가?</li><li>열정은 무엇인가?</li><li>지금이 위기인가?</li><li>한국인은 누구인가?</li></ul><p>이러한 질문들을 갖고 있는 분들에게도 이 책을 추천한다. 오랜 직장 생활을 한 선배는 이러한 질문에 어떠한 답변을 갖고 있는지, 또한 나만의 답변을 수정, 보완하는데 도움을 받기 위해서 읽어볼 가치가 충분한 책이다. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/01/21/review-books-3/2755A14B5886040729.png&quot;&gt;
&lt;p&gt;직장인이라면 한 번쯤 읽어보면 좋을만한 책, ‘어떻게 일하며 성장할 것인가’는, 특히 다음과 같은 사람들에게 추천해주고 싶다.&lt;/p&gt;

      
    
    </summary>
    
      <category term="Review" scheme="https://devist.github.io/categories/review/"/>
    
      <category term="Books" scheme="https://devist.github.io/categories/review/books/"/>
    
    
      <category term="독서" scheme="https://devist.github.io/tags/%EB%8F%85%EC%84%9C/"/>
    
      <category term="책" scheme="https://devist.github.io/tags/%EC%B1%85/"/>
    
      <category term="Book" scheme="https://devist.github.io/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins with GCP_(2)Gitlab 설치</title>
    <link href="https://devist.github.io/2019/01/19/jenkins-with-gitlab/"/>
    <id>https://devist.github.io/2019/01/19/jenkins-with-gitlab/</id>
    <published>2019-01-19T06:58:52.000Z</published>
    <updated>2019-01-20T16:13:32.168Z</updated>
    
    <content type="html"><![CDATA[<p>저번 포스팅에서는 <a href="https://devist.github.io/2019/01/14/jenkins-with-gcp/">Centos7에 젠킨스를 설치</a>했다. 이번에는 Jenkins가 설치된 Centos7에 Jenkins와 연동할 Gitlab을 설치해본다.</p><p><br></p><h1 id="Step1-git-설치"><a href="#Step1-git-설치" class="headerlink" title="Step1. git 설치"></a>Step1. git 설치</h1><p>먼저 Git을 설치하기 위해, Repository를 설정한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum install http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm</span><br></pre></td></tr></table></figure><p>Git을 설치한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install git</span><br></pre></td></tr></table></figure><p>정상적으로 설치되었는지 버전을 확인한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p><br><br></p><h1 id="Step2-gitlab-설치"><a href="#Step2-gitlab-설치" class="headerlink" title="Step2. gitlab 설치"></a>Step2. gitlab 설치</h1><p><a href="https://about.gitlab.com/install/#centos-7" target="_blank" rel="noopener">https://about.gitlab.com/install/#centos-7</a> 를 따라하되, 포트 설정만 변경해준다. 톰캣 등 기본적으로 8080 포트를 많이 사용하는데 gitlab 의 기본 설정 또한 마찬가지로 8080 포트를 사용하고 있기 때문이다. 나는 9090으로 변경할 예정이다.</p><p>시스템 방화벽에서 HTTP 및 SSH 액세스가 가능하도록 한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class="line">$ sudo systemctl enable sshd</span><br><span class="line">$ sudo systemctl start sshd</span><br><span class="line"></span><br><span class="line">$ sudo firewall-cmd --permanent --add-service=http</span><br><span class="line">$ sudo systemctl reload firewalld</span><br></pre></td></tr></table></figure><p>알림용 이메일 사용을 위해 다음을 실행한다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install postfix</span><br><span class="line">$ sudo systemctl enable postfix</span><br><span class="line">$ sudo systemctl start postfix</span><br></pre></td></tr></table></figure><p>Gitlab package repository를 설정한다. 참고로 gitlab ee 는 엔터프라이즈 버전이며, ce는 커뮤니티 버전으로 무료이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure><p>Gitlab을 설치한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install gitlab-ce</span><br></pre></td></tr></table></figure><p>Gitlab 포트를 변경하기 위하여 gitlab 설정 파일을 vi 에디터로 연다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure><p><br>먼저 웹사이트 주소의 포트를 사용할 포트로 변경하기 위해 external_url 변수를 수정한다. 나 같은 경우는 기본 80 포트를 사용할 것이기 때문에 포트 번호를 명시하지 않았다.<img src="/2019/01/19/jenkins-with-gitlab/external_url.png"></p><p><br>인증과 unicorn 관련하여 포트가 8080으로 되어 있는 부분을 9090 포트로 변경하려고 한다. 내부적인 인증과 관련된 포트이므로 방화벽 해제할 필요는 없다. 먼저 auth_backend를 9090포트로 변경한다.<img src="/2019/01/19/jenkins-with-gitlab/auth_backend.png"></p><p><br>이후 unicorn_port를 9090으로 변경하고 :wq로 저장하여 나온다.<img src="/2019/01/19/jenkins-with-gitlab/unicorn_port.png"></p><p><br>설정을 적용시키기 위해 다음의 명령을 실행해본다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p><br>이후 웹브라우저를 열고 외부 접속 URL에 접속해보면 정상적으로 동작하는 것을 확인할 수 있다. root의 비밀번호를 설정해준다.<img src="/2019/01/19/jenkins-with-gitlab/gitlab.png"></p><h1 id="Step3-Jenkins와-Gitlab-연동"><a href="#Step3-Jenkins와-Gitlab-연동" class="headerlink" title="Step3. Jenkins와 Gitlab 연동"></a>Step3. Jenkins와 Gitlab 연동</h1><p>이제 Gitlab과 Jenkins를 단순히 연동해본다. 이 단계까지만 끝내면 추후 많은 것들을 해볼 수 있을 것 같다.</p><h4 id="A-Jenkins에-gitlab-플러그인-설치"><a href="#A-Jenkins에-gitlab-플러그인-설치" class="headerlink" title="A. Jenkins에 gitlab 플러그인 설치"></a>A. Jenkins에 gitlab 플러그인 설치</h4><p>Jenkins와 Gitlab 연동을 위해서, 먼저 Jenkins에 관련 Plugin을 설치한다. <strong>Jenkins 웹사이트 접속-&gt;왼쪽 메뉴 중 Jenkins 관리 클릭-&gt;플러그인 관리-&gt;설치 가능 탭 선택 -&gt; 필터에 Gitlab 입력</strong> 후, 검색된 Gitlab 관련 플러그인을 설치한다. 나 같은 경우 모두 설치했다.<img src="/2019/01/19/jenkins-with-gitlab/gitlab_install_plugin.png"></p><ul><li>Gitlab Authentication : gitlab OAuth 인증 플러그인</li><li>Violation Comments to Gitlab : 코드분석기로 보고된 위반사항을 찾아주고 comments 할 수 있도록 돕는 플러그인</li><li>Gitlab : Gitlab에서 젠킨스 빌드를 실행하고 결과를 gitlab UI에 표시할 수 있도록 해주는 플러그인</li><li>Gitlab Logo</li><li>Gitlab Merge Request Builder : Jenkins를 gitlab과 병합 요청을 빌드하기 위해 통합해주는 플러그인</li><li>Gitlab Hook</li></ul><p><br><br></p><h4 id="B-Gitlab에서-Access-Token-생성"><a href="#B-Gitlab에서-Access-Token-생성" class="headerlink" title="B. Gitlab에서 Access Token 생성"></a>B. Gitlab에서 Access Token 생성</h4><p>아래 그림과 같이 Profile-&gt;Access Token 탭으로 이동해서, 토큰 이름, 만료일자, Scope 선택 후 access Token을 생성한 후 token을 복사해 둔다.<img src="/2019/01/19/jenkins-with-gitlab/make_gitlab_access_token.png"></p><p><br><br></p><h4 id="C-Gitlab에서-Jenkins와-연동할-프로젝트-생성"><a href="#C-Gitlab에서-Jenkins와-연동할-프로젝트-생성" class="headerlink" title="C. Gitlab에서 Jenkins와 연동할 프로젝트 생성"></a>C. Gitlab에서 Jenkins와 연동할 프로젝트 생성</h4><p>Jenkins에 연동할 프로젝트도 하나 생성해본다. Clone with HTTP url 을 사용할 것이다.<img src="/2019/01/19/jenkins-with-gitlab/create_project.png"></p><p><br><br></p><h4 id="D-젠킨스에-Gitlab-Token-등록"><a href="#D-젠킨스에-Gitlab-Token-등록" class="headerlink" title="D. 젠킨스에 Gitlab Token 등록"></a>D. 젠킨스에 Gitlab Token 등록</h4><p>Gitlab 토큰을 젠킨스에서 사용하기 위해, Jenkins에서 Global Credential을 등록해준다. 이를 위해 먼저 젠킨스 사이트로 이동하여, <strong>Credentials-&gt;System-&gt;Global Credentials</strong>로 이동하여 <strong>adding some Credentials 를 클릭</strong>한다.​<img src="/2019/01/19/jenkins-with-gitlab/go_to_make_credentials.gif"></p><p><br></p><p>Kind 부분을 클릭하여 <strong>Gitlab API Token</strong>을 선택해주고, API Token에는 아까 Gitlab에서 생성한 Token을 입력해준 후, 이후 OK를 클릭하여 생성완료 해주면, Gitlab과 Jenkins의 연동이 완료된다.<img src="/2019/01/19/jenkins-with-gitlab/New_Credentials_Jenkins.png"></p><p><br><br></p><h4 id="E-젠킨스-build-위한-Item-만들기"><a href="#E-젠킨스-build-위한-Item-만들기" class="headerlink" title="E. 젠킨스 build 위한 Item 만들기"></a>E. 젠킨스 build 위한 Item 만들기</h4><p>Jenkins 대시보드에서 새로운 아이템 버튼을 클릭하여, 적당한 이름과 함께 <strong>Freesytle project</strong> 를 선택한 후, Ok 버튼을 만들어 아이템을 생성한다.<img src="/2019/01/19/jenkins-with-gitlab/make_jenkins_item.gif"></p><p><br></p><p><strong>General Tab : </strong> 간단하게 설명만 적어준다.<img src="/2019/01/19/jenkins-with-gitlab/jenkins_config_general.png"></p><p><br></p><p><strong>소스 코드 관리 탭 : </strong> </p><ul><li>위에서 생성한 Gitlab Repository의 Clone URL을 입력한 후, <strong>Add 버튼 -&gt; Jenkins</strong> 를 클릭한다.<img src="/2019/01/19/jenkins-with-gitlab/jenkins_config_sourcecode_1.png"></li><li>Gitlab 아이디와 비밀번호를 입력한 후 add 버튼을 누른다.<img src="/2019/01/19/jenkins-with-gitlab/jenkins_config_sourcecode_2.png"></li><li>생성한 Credential을 선택해준다.<img src="/2019/01/19/jenkins-with-gitlab/jenkins_config_sourcecode_3.png"></li></ul><p><br></p><p><strong>build Tab : </strong> 간단하게 설명만 적어준다.<img src="/2019/01/19/jenkins-with-gitlab/jenkins_config_build.png"></p><p>마지막으로 하단의 저장 버튼이나 Apply 버튼을 클릭해서, Item 생성을 완료해준다.</p><p><br><br></p><h4 id="F-Jenkins로-빌드해보기"><a href="#F-Jenkins로-빌드해보기" class="headerlink" title="F. Jenkins로 빌드해보기"></a>F. Jenkins로 빌드해보기</h4><p>이제 모든 준비가 끝났으므로 테스트 해 볼 차례다. 아래와 같이 dashboard에서 우리가 만든 Item을 확인할 수 있다. </p><ul><li>Gitlab에서 Readme.md 파일 수정하여commit<img src="/2019/01/19/jenkins-with-gitlab/test1_commit.png"></li><li>Jenkins로 돌아와 Build Icon 클릭<img src="/2019/01/19/jenkins-with-gitlab/test2_move.png"><img src="/2019/01/19/jenkins-with-gitlab/test3_build.png"></li><li>정상적으로 빌드되었는지 확인하기 위해, SSH 접속하여 Build Shell script로 인해 *.log 파일이 생성되었는지 확인.<img src="/2019/01/19/jenkins-with-gitlab/test4_ssh.png"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;저번 포스팅에서는 &lt;a href=&quot;https://devist.github.io/2019/01/14/jenkins-with-gcp/&quot;&gt;Centos7에 젠킨스를 설치&lt;/a&gt;했다. 이번에는 Jenkins가 설치된 Centos7에 Jenkins와 연동할
      
    
    </summary>
    
      <category term="Cloud" scheme="https://devist.github.io/categories/cloud/"/>
    
      <category term="CI/CD" scheme="https://devist.github.io/categories/cloud/ci-cd/"/>
    
    
      <category term="GCP" scheme="https://devist.github.io/tags/gcp/"/>
    
      <category term="Jenkins" scheme="https://devist.github.io/tags/jenkins/"/>
    
      <category term="CD" scheme="https://devist.github.io/tags/cd/"/>
    
      <category term="CI" scheme="https://devist.github.io/tags/ci/"/>
    
      <category term="Google Cloud Platform" scheme="https://devist.github.io/tags/google-cloud-platform/"/>
    
      <category term="gitlab" scheme="https://devist.github.io/tags/gitlab/"/>
    
      <category term="git" scheme="https://devist.github.io/tags/git/"/>
    
      <category term="centos7" scheme="https://devist.github.io/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>JSDoc 설치 및 사용방법 | JavaDoc과 비슷한 JSDoc으로 자바스크립트 문서화</title>
    <link href="https://devist.github.io/2019/01/16/how-to-use-jsdoc/"/>
    <id>https://devist.github.io/2019/01/16/how-to-use-jsdoc/</id>
    <published>2019-01-16T11:32:34.000Z</published>
    <updated>2019-01-16T12:02:42.975Z</updated>
    
    <content type="html"><![CDATA[<p>*맥 OS에서 작성했습니다.</p><p>JavaScript에서 JAVADOC 처럼 주석을 문서를 뽑아주는 JSDOC 이라는 플러그인이 있습니다.</p><p>이에 대해 구체적인 사용방법이 정리되어 있는 블로그가 없는 것 같아 정리해 봅니다.</p><p><strong><a href="http://usejsdoc.org/" target="_blank" rel="noopener">JSDOC 사용법이 정리되어 있는 사이트</a>&lt;클릭&gt;</strong></p><p><strong><a href="https://github.com/jsdoc3/jsdoc" target="_blank" rel="noopener">JSDOC Github 사이트</a>&lt;클릭&gt;</strong></p><p>JSDOC은 다양한 템플릿으로 문서를 만들 수 있습니다.</p><p>저는 docdash가 자주 사용된다고 하여 이것 또한 설치하여 사용할 겁니다.</p><p><img src="https://t1.daumcdn.net/cfile/tistory/995C3E485A4C332102" alt="img"></p><p>다음은 설치 및 사용 방법입니다.</p><h4 id="1-먼저-터미널을-열고-gt-npm-install-jsdoc"><a href="#1-먼저-터미널을-열고-gt-npm-install-jsdoc" class="headerlink" title="1. 먼저 터미널을 열고, &gt; npm install jsdoc"></a>1. 먼저 터미널을 열고, &gt; npm install jsdoc</h4><p><img src="https://t1.daumcdn.net/cfile/tistory/990BCC365A4C31FE09" alt="img"></p><h4 id="2-jsdoc-이-설치된-폴더로-이동하여-gt-npm-install-docdash"><a href="#2-jsdoc-이-설치된-폴더로-이동하여-gt-npm-install-docdash" class="headerlink" title="2. jsdoc 이 설치된 폴더로 이동하여, &gt; npm install docdash"></a>2. jsdoc 이 설치된 폴더로 이동하여, &gt; npm install docdash</h4><p><img src="https://t1.daumcdn.net/cfile/tistory/99A3CE395A4C325E47" alt="img"></p><h4 id="3-하나의-파일-문서화해보기"><a href="#3-하나의-파일-문서화해보기" class="headerlink" title="3. 하나의 파일 문서화해보기"></a>3. 하나의 파일 문서화해보기</h4><p>보통 document를 만들 때, 하나의 파일만 문서화하지 않습니다. 그러나 예제로, 하나의 JavaScript 파일만 문서화 해보겠습니다. 먼저 javadoc 처럼 문서를 뽑아내기 위해서 주석과 규칙을 이용해서 자바스크립트 파일에 문서를 추가해야겠죠?</p><p>이 과정은 좀 더 아래에서 나중에 설명하겠습니다.</p><ul><li><p>먼저 문서화할 자바스크립트 파일에 JSDoc 문법으로 주석을 작성합니다</p></li><li><p>javacript 파일이 있는 경로로 이동 후 다음 명령어를 사용하여 문서화 합니다. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> jsdoc [javascript] -t [docdash 경로]</span><br></pre></td></tr></table></figure><p>여기서 -t는 템플릿을 사용하겠다는 것이며, docdash 경로는 jsdoc이 설치되어 있는 경로내에 존재합니다. 아래 그림 예제를 참고하세요.<img src="https://t1.daumcdn.net/cfile/tistory/993FCB475A4C36FE11" alt="img"></p></li><li><p>jsdoc을 실행한 해당 경로에 out 폴더가 생겼을 겁니다. 여기서 index.html 을 열어보면 다음과 같이 html 문서를 확인할 수 있습니다.<img src="https://t1.daumcdn.net/cfile/tistory/99229C4A5A4C375F15" alt="img"></p></li></ul><ul><li><p>그러나 자바스크립트 파일의 주석만 덩하니 문서화하면, 문서의 HOME 페이지가 허전할 겁니다. 이 부분은 마크다운 문서인 README.md 를 작성하여 채워넣습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> jsdoc [javascript 파일] [markdown 파일]</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://t1.daumcdn.net/cfile/tistory/99D449375A4C392929" alt="img"></p><h4 id="4-Javascript-프로젝트-문서화해보기"><a href="#4-Javascript-프로젝트-문서화해보기" class="headerlink" title="4. Javascript 프로젝트 문서화해보기"></a>4. Javascript 프로젝트 문서화해보기</h4><p>아까 말씀드린 것처럼 보통 하나의 파일만을 문서화하지 않죠. 폴더내 모든 javascript 파일을 한 번에 문서화할 수도 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> jsdoc [폴더]  -r</span><br></pre></td></tr></table></figure><h4 id="5-Javascript-프로젝트-문서화-커스터마이징"><a href="#5-Javascript-프로젝트-문서화-커스터마이징" class="headerlink" title="5. Javascript 프로젝트 문서화 커스터마이징"></a>5. Javascript 프로젝트 문서화 커스터마이징</h4><ul><li>README.md 파일을 HOME 으로 사용하고, </li><li><p>동시에 폴더 내 모든 자바스크립트 파일을 문서화하며, </p></li><li><p>이 때 docdash 템플릿까지 이용하는 방법</p></li></ul><p>은 다음과 같습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> jsdoc [폴더] [markdown 파일] -r -t [docdash 경로]</span><br></pre></td></tr></table></figure><p><img src="https://t1.daumcdn.net/cfile/tistory/9909A93A5A4C3A8326" alt="img"></p><p>지금까지 jsdoc 이용방법을 알아보았습니다. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;*맥 OS에서 작성했습니다.&lt;/p&gt;
&lt;p&gt;JavaScript에서 JAVADOC 처럼 주석을 문서를 뽑아주는 JSDOC 이라는 플러그인이 있습니다.&lt;/p&gt;
&lt;p&gt;이에 대해 구체적인 사용방법이 정리되어 있는 블로그가 없는 것 같아 정리해 봅니다.&lt;/
      
    
    </summary>
    
      <category term="Frontend" scheme="https://devist.github.io/categories/frontend/"/>
    
      <category term="Etc" scheme="https://devist.github.io/categories/frontend/etc/"/>
    
    
      <category term="javascript" scheme="https://devist.github.io/tags/javascript/"/>
    
      <category term="jsdoc" scheme="https://devist.github.io/tags/jsdoc/"/>
    
      <category term="esdoc" scheme="https://devist.github.io/tags/esdoc/"/>
    
  </entry>
  
  <entry>
    <title>ESDoc 설치 및 사용방법 | ES6 자바스크립트 문서화하기</title>
    <link href="https://devist.github.io/2019/01/15/how-to-use-esdoc/"/>
    <id>https://devist.github.io/2019/01/15/how-to-use-esdoc/</id>
    <published>2019-01-15T14:34:18.000Z</published>
    <updated>2019-01-20T16:05:41.308Z</updated>
    
    <content type="html"><![CDATA[<p>esdoc은 JavaScript 용 문서 제네레이터, 특히 es6에 특화된 documentation generator입니다. 비슷하게 JavaScript의 주석을 문서로 만들어주는 것이로, JSdoc 도 있습니다.</p><p>현재 진행하고 있는 es6로 개발 중인 자바스크립트 프로젝트에는, esdoc을 설치하고 사용하여  자바스크립트 파일을 주석으로 문서화해보려고 합니다.</p><p>적용하려는 프로젝트는 다음과 같이 구성되어 있습니다.</p><ul><li>Webpack</li><li>Javascript (es6)</li></ul><h2 id="Step1-esdoc-설치"><a href="#Step1-esdoc-설치" class="headerlink" title="Step1. esdoc 설치"></a>Step1. esdoc 설치</h2><p>설치는 간단합니다. <a href="https://esdoc.org/" target="_blank" rel="noopener">공식 문서</a>에도 잘 나와 있습니다. 아래는 간단히 번역한 것입니다.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># project directory 로 이동하세요</span></span><br><span class="line">cd your-project/</span><br><span class="line"></span><br><span class="line"><span class="comment"># ESDOC 과 표준 플러그인을 설치하세요.</span></span><br><span class="line">npm install esdoc esdoc-standard-plugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 다음과 같이 configuration 파일을 작성하세요.</span></span><br><span class="line">echo <span class="string">'&#123;</span></span><br><span class="line"><span class="string">  "source": "./src",</span></span><br><span class="line"><span class="string">  "destination": "./docs",</span></span><br><span class="line"><span class="string">  "plugins": [&#123;"name": "esdoc-standard-plugin"&#125;]</span></span><br><span class="line"><span class="string">&#125;'</span> &gt; .esdoc.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># run ESDoc</span></span><br><span class="line">./node_modules/.bin/esdoc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 문서를 확인해 보세요.</span></span><br><span class="line">open ./docs/index.html</span><br></pre></td></tr></table></figure><p>다음과 같이 적용된 모습이 나오면 됩니다.</p><p><img src="https://esdoc.org/manual/asset/image/top.png" alt=""></p><h2 id="Step2-테마-적용"><a href="#Step2-테마-적용" class="headerlink" title="Step2. 테마 적용"></a>Step2. 테마 적용</h2><p>esdoc은 아직까지는 jsdoc 처럼 테마가 많지 않은 것 같습니다.  저는 <strong><a href="https://github.com/sinnerschrader/esdoc-custom-theme" target="_blank" rel="noopener">esdoc-custom-theme</a></strong> 의 Light mode를 적용하려 합니다.</p><p><strong>Light mode</strong><img src="https://camo.githubusercontent.com/462d1fbda7787d88b9d9454778c01c53a0a9941f/68747470733a2f2f63646e2e7261776769742e636f6d2f73696e6e657273636872616465722f6573646f632d637573746f6d2d7468656d652f6d61737465722f2e6769746875622f696d616765732f6c696768742d6d6f64652e706e67" alt=""></p><p><strong>적용 방법은 다음과 같습니다.</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> project directory 로 이동하세요</span><br><span class="line">cd your-project/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> ESDOC 과 표준 플러그인을 설치하세요. (esdoc)은 Step1을 하지 않았을 때 입력하세요.</span><br><span class="line">npm install (esdoc) esdoc-publish-html-plugin esdoc-custom-theme -D --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 다음과 같이 configuration 파일을 작성하세요.</span><br><span class="line"><span class="meta">#</span> Step1와 비교해보면, plugins 가 바뀌었습니다.</span><br><span class="line">echo '&#123;</span><br><span class="line">  "source": "./src",</span><br><span class="line">  "destination": "./docs",</span><br><span class="line">  "plugins": [</span><br><span class="line">    &#123;</span><br><span class="line">      "name": "esdoc-publish-html-plugin",</span><br><span class="line">      "option": &#123;</span><br><span class="line">        "template": "./node_modules/esdoc-custom-theme/template"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;' &gt; .esdoc.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> run ESDoc</span><br><span class="line">./node_modules/.bin/esdoc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 문서를 확인해 보세요.</span><br><span class="line">open ./docs/index.html</span><br></pre></td></tr></table></figure><p>다음과 같이 비슷한 형태로 나온다면, 테마가 정상적으로 적용된 겁니다.</p><p><img src="https://camo.githubusercontent.com/a93d7c2c8b6752f9b49a7b68a3f4791e21b5887d/68747470733a2f2f63646e2e7261776769742e636f6d2f73696e6e657273636872616465722f6573646f632d637573746f6d2d7468656d652f6d61737465722f2e6769746875622f696d616765732f6461726b2d6d6f64652e706e67" alt=""></p><h2 id="Step3-커스터마이징"><a href="#Step3-커스터마이징" class="headerlink" title="Step3. 커스터마이징"></a>Step3. 커스터마이징</h2><ul><li>문서 저작권 및 Repository 연결</li><li>마크다운으로 좀 더 상세한 문서 작성</li><li>테마 수정</li></ul><p>을 해보려고 합니다.</p><h3 id="추가-플러그인-설치"><a href="#추가-플러그인-설치" class="headerlink" title="추가 플러그인 설치"></a>추가 플러그인 설치</h3><p>커스터마이징을 위해, 먼저 다음의 플러그인을 설치합니다.</p><ul><li><a href="https://yarnpkg.com/en/package/esdoc-brand-plugin" target="_blank" rel="noopener">esdoc-brand-plugin</a></li><li><a href="https://yarnpkg.com/en/package/esdoc-inject-style-plugin" target="_blank" rel="noopener">esdoc-inject-style-plugin</a></li><li><a href="https://yarnpkg.com/en/package/esdoc-standard-plugin" target="_blank" rel="noopener">esdoc-standard-plugin</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> project directory 로 이동하세요</span><br><span class="line">cd your-project/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 커스터마이징을 위한 추가 플러그인을 설치합니다</span><br><span class="line">npm install esdoc-brand-plugin esdoc-inject-style-plugin esdoc-standard-plugin -D --save</span><br></pre></td></tr></table></figure><h3 id="Configuration-파일-수정"><a href="#Configuration-파일-수정" class="headerlink" title="Configuration 파일 수정"></a>Configuration 파일 수정</h3><p>아래를 따라하면, </p><ul><li><strong>esdoc-brand-plugin</strong> 에서 자신의 git 주소와 문서 타이틀 등을 수정할 수 있습니다.</li><li><strong>esdoc-inject-style-plugin</strong> 에서 문서의 스타일(테마)를 수정할 수 있습니다.<ul><li><em>추가로 cofiguration 파일에 명시된 custom-styles.css 를 생성해야 동작합니다</em></li></ul></li><li><strong>esdoc-standard-plugin</strong> 에서 마크다운 문서를 추가할 수 있습니다.<ul><li><em>추가로 cofiguration 파일에 명시된 마크다운 문서를 생성해야 동작합니다</em></li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> project directory 로 이동하세요</span><br><span class="line">cd your-project/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> vi 편집기로 Step1,Step2에서 수정했던 .esdoc.json 파일을 열어, plugin 쪽을 다시 한 번 수정합니다.</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "plugins": [</span><br><span class="line">    &#123;</span><br><span class="line">      "name": "esdoc-brand-plugin",</span><br><span class="line">      "option": &#123;</span><br><span class="line">        "title": "esdoc-custom-theme",</span><br><span class="line">        "description": "A customizable theme for esdoc",</span><br><span class="line">        "repository": "https://github.com/sinnerschrader/esdoc-custom-theme",</span><br><span class="line">        "site": "sinnerschrader.github.io/esdoc-custom-theme",</span><br><span class="line">        "author": "https://github.com/pixelass"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "name": "esdoc-inject-style-plugin",</span><br><span class="line">      "option": &#123;</span><br><span class="line">      "enable": true,</span><br><span class="line">        "styles": [</span><br><span class="line">          "./custom-styles.css"</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "name": "esdoc-publish-html-plugin",</span><br><span class="line">      "option": &#123;</span><br><span class="line">        "template": "./node_modules/esdoc-custom-theme/template"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "name": "esdoc-standard-plugin",</span><br><span class="line">      "option": &#123;</span><br><span class="line">        "coverage": &#123;</span><br><span class="line">          "enable": true</span><br><span class="line">        &#125;,</span><br><span class="line">        "accessor": &#123;</span><br><span class="line">          "access": ["public"],</span><br><span class="line">          "autoPrivate": true</span><br><span class="line">        &#125;,</span><br><span class="line">        "manual": &#123;</span><br><span class="line">          "index": "./manual/index.md",</span><br><span class="line">          "globalIndex": true,</span><br><span class="line">          "asset": "./manual/assets",</span><br><span class="line">          "files": [</span><br><span class="line">            "./manual/installation.md"</span><br><span class="line">            "./manual/usage.md"</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="custom-styles-css-파일-수정"><a href="#custom-styles-css-파일-수정" class="headerlink" title="custom-styles.css 파일 수정"></a>custom-styles.css 파일 수정</h3><p>위의 configuration 파일에서 esdoc 문서의 테마 커스텀을 위해,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;name&quot;: &quot;esdoc-inject-style-plugin&quot;,</span><br><span class="line">      &quot;option&quot;: &#123;</span><br><span class="line">      &quot;enable&quot;: true,</span><br><span class="line">        &quot;styles&quot;: [</span><br><span class="line">          &quot;./custom-styles.css&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>와 같이 수정했기 때문에, 현재는 존재하지 않는 custom-styels.css 파일을 만들어줘야 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> project directory 로 이동하세요</span><br><span class="line">cd your-project/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> vi 편집기로 custom-styles.css 파일을 생성합니다.</span><br><span class="line">vi custom-styles.css</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 해당 파일에 다음을 기입합니다.</span><br><span class="line">:root.light &#123;</span><br><span class="line">  --main-background: #fff;</span><br><span class="line">  --main-color: #000;</span><br><span class="line">  --main-border-color: #c9d0d5;</span><br><span class="line">  --main-link-color: #3300d1;</span><br><span class="line">  --main-focus-color: #7588fb;</span><br><span class="line"></span><br><span class="line">  --main-header-background: #3300d1;</span><br><span class="line">  --main-header-color: #fff;</span><br><span class="line">  --main-header-border-color: #010049;</span><br><span class="line">  --main-header-link-hover-shade: rgba(255, 255, 255, 0.1);</span><br><span class="line">  --main-header-link-active-shade: rgba(255, 255, 255, 0.2);</span><br><span class="line">  --main-header-shadow: 0 0.175rem 0.25rem rgba(0, 0, 0, 0.35), 0 0.25rem 0.5rem rgba(0, 0, 0, 0.65);</span><br><span class="line"></span><br><span class="line">  --left-sidebar-background: #f2f5f9;</span><br><span class="line">  --left-sidebar-background-active: #acb4b7;</span><br><span class="line">  --left-sidebar-color-active: #000;</span><br><span class="line">  --left-sidebar-color: #000;</span><br><span class="line">  --left-sidebar-border-color: #c9d0d5;</span><br><span class="line">  --left-sidebar-indent-background: none;</span><br><span class="line">  --left-sidebar-shadow: none;</span><br><span class="line"></span><br><span class="line">  --right-sidebar-background: #212429;</span><br><span class="line">  --right-sidebar-background-active: #16181f;</span><br><span class="line">  --right-sidebar-color-active: #fff;</span><br><span class="line">  --right-sidebar-color: #fff;</span><br><span class="line">  --right-sidebar-border-color: #2d3038;</span><br><span class="line">  --right-sidebar-indent-background: none;</span><br><span class="line">  --right-sidebar-shadow: -0.125rem 0 0.25rem rgba(0, 0, 0, 0.25), -0.175rem 0 0.35rem rgba(0, 0, 0, 0.45);</span><br><span class="line"></span><br><span class="line">  --card-link-hover-shade: rgba(0, 0, 0, 0.1);</span><br><span class="line"></span><br><span class="line">  --search-separator-background: #3300d1;</span><br><span class="line">  --search-separator-color: #fff;</span><br><span class="line">  --search-result-background: #f2f5f9;</span><br><span class="line">  --search-result-color: #000;</span><br><span class="line">  --search-result-border-color: #c9d0d5;</span><br><span class="line">  --search-result-selected-background: #c9d0d5;</span><br><span class="line">  --search-result-selected-color: #000;</span><br><span class="line">  --search-result-shadow: 0 0.25rem 0.25rem rgba(0, 0, 0, 0.35), 0 0.5rem 0.5rem rgba(0, 0, 0, 0.65);</span><br><span class="line">  --search-result-hover-shade: rgba(0, 0, 0, 0.1);</span><br><span class="line">  --search-result-focus-color: #7588fb;</span><br><span class="line"></span><br><span class="line">  --main-code-background: #c9d0d5;</span><br><span class="line">  --main-code-color: #0d6663;</span><br><span class="line">  --main-code-border-color: #c9d0d5;</span><br><span class="line"></span><br><span class="line">  --pretty-code-error-background: #7f012a;</span><br><span class="line">  --pretty-code-error-color: #fff;</span><br><span class="line"></span><br><span class="line">  --kind-background: #16181f;</span><br><span class="line">  --kind-color: #696e76;</span><br><span class="line"></span><br><span class="line">  --kind-function-background: hsl(0, 80%, 70%);</span><br><span class="line">  --kind-function-color: hsl(0, 90%, 20%);</span><br><span class="line"></span><br><span class="line">  --kind-class-background: hsl(30, 80%, 70%);</span><br><span class="line">  --kind-class-color: hsl(30, 90%, 20%);</span><br><span class="line"></span><br><span class="line">  --kind-variable-background: hsl(60, 80%, 70%);</span><br><span class="line">  --kind-variable-color: hsl(60, 90%, 20%);</span><br><span class="line"></span><br><span class="line">  --table-color: #000;</span><br><span class="line">  --table-background: #f2f5f9;</span><br><span class="line">  --table-border-color: #c9d0d5;</span><br><span class="line">  --td-color: #000;</span><br><span class="line">  --td-background: #f2f5f9;</span><br><span class="line">  --td-border-color: #c9d0d5;</span><br><span class="line">  --thead-color: #000;</span><br><span class="line">  --thead-background: #acb4b7;</span><br><span class="line">  --thead-border-color: #c9d0d5;</span><br><span class="line"></span><br><span class="line">  --light-switch-color: #fff;</span><br><span class="line">  --light-switch-background: #212429;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="마크다운-파일-생성"><a href="#마크다운-파일-생성" class="headerlink" title="마크다운 파일 생성"></a>마크다운 파일 생성</h3><p>위의 configuration 파일에서 esdoc 문서에 코드 외의 추가 마크다운 문서를 작성하기 위해서,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     &quot;name&quot;: &quot;esdoc-standard-plugin&quot;,</span><br><span class="line">     &quot;option&quot;: &#123;</span><br><span class="line">       &quot;coverage&quot;: &#123;</span><br><span class="line">         &quot;enable&quot;: true</span><br><span class="line">       &#125;,</span><br><span class="line">       &quot;accessor&quot;: &#123;</span><br><span class="line">         &quot;access&quot;: [&quot;public&quot;],</span><br><span class="line">         &quot;autoPrivate&quot;: true</span><br><span class="line">       &#125;,</span><br><span class="line">       &quot;manual&quot;: &#123;</span><br><span class="line">         &quot;index&quot;: &quot;./manual/index.md&quot;,</span><br><span class="line">         &quot;globalIndex&quot;: true,</span><br><span class="line">         &quot;asset&quot;: &quot;./manual/assets&quot;,</span><br><span class="line">         &quot;files&quot;: [</span><br><span class="line">           &quot;./manual/installation.md&quot;</span><br><span class="line">           &quot;./manual/usage.md&quot;</span><br><span class="line">         ]</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>와 같이 수정했기 때문에, 현재는 존재하지 않는 custom-styels.css 파일을 만들어줘야 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> project directory 로 이동하세요</span><br><span class="line">cd your-project/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> manual 폴더와 manual/assets 폴더를 만듭니다</span><br><span class="line">mkdir manual</span><br><span class="line">mkdir manual/assets</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> manual 폴더로 이동합니다</span><br><span class="line">cd manual</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 위에서 기입한 마크다운 문서를 만듭니다.</span><br><span class="line">touch index.md installation.md usage.md</span><br></pre></td></tr></table></figure><h3 id="최종확인"><a href="#최종확인" class="headerlink" title="최종확인"></a>최종확인</h3><p>커스터마이징이 제대로 되었을까요? 확인해 봅시다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> project directory 로 이동하세요</span><br><span class="line">cd your-project/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> run ESDoc</span><br><span class="line">./node_modules/.bin/esdoc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 문서를 확인해 보세요.</span><br><span class="line">open ./docs/index.html</span><br></pre></td></tr></table></figure><p>저는 다음과 같이 완성했습니다.</p><img src="/2019/01/15/how-to-use-esdoc/esdoc_customizing.jpg">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;esdoc은 JavaScript 용 문서 제네레이터, 특히 es6에 특화된 documentation generator입니다. 비슷하게 JavaScript의 주석을 문서로 만들어주는 것이로, JSdoc 도 있습니다.&lt;/p&gt;
&lt;p&gt;현재 진행하고 있는
      
    
    </summary>
    
      <category term="Frontend" scheme="https://devist.github.io/categories/frontend/"/>
    
      <category term="Etc" scheme="https://devist.github.io/categories/frontend/etc/"/>
    
    
      <category term="javascript" scheme="https://devist.github.io/tags/javascript/"/>
    
      <category term="jsdoc" scheme="https://devist.github.io/tags/jsdoc/"/>
    
      <category term="esdoc" scheme="https://devist.github.io/tags/esdoc/"/>
    
  </entry>
  
  <entry>
    <title>독서기록) 그대 눈동자에 건배</title>
    <link href="https://devist.github.io/2019/01/14/review-books-2/"/>
    <id>https://devist.github.io/2019/01/14/review-books-2/</id>
    <published>2019-01-14T13:50:54.000Z</published>
    <updated>2019-01-21T12:19:03.345Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://t1.daumcdn.net/cfile/tistory/99D854415AC0E1E93A" alt="그대 눈동자에 건배 - 히가시노 게이고"></p><p>히가시노 게이고는 ‘용의자 x의 헌신’ 등 추리 소설로 유명하지만, 내가 처음 접했고 지금도 유일하게 읽었던 책은 ‘나미야 백화점의 기적’ 이다. 이후 만난 책이 이 책, ‘그대 눈동자에 건배’ 다. (스포 있음)</p><h3 id="새해-첫날의-결심"><a href="#새해-첫날의-결심" class="headerlink" title="새해 첫날의 결심"></a>새해 첫날의 결심</h3><p>열심히 살아왔던 부부가 새해를 맞아 신사에 가는 길에 쓰러진 군수를 발견한다. 놀란 그들은 경찰에 신고를 하게 되고 사건의 실마리는 하나씩 풀려가는데. 결론은 군수와 교육장의 어이 없는 사랑 싸움이었다. 부부는 이 사건의 휘말리며 신사를 다녀온 뒤에 도소주로 자살하려던 계획을 접고 다시 열심히 살아가보자고 다짐한다. 아내가 있는 군수와 교육장의 도덕적 해이, 사건을 대충 끝내버리려는 경찰서장, 신을 모신다는 신사 구지의 물욕 등을 보며 생각이 바뀌었기 때문이다. 양심도 없고 책임감도 없는 이들이 살아가는데, 우리도 살아가야 하지 않겠는가? 이들은 앞으로 조금 더 가볍게 살아가리라.</p><h3 id="10년-만의-밸런타인데이"><a href="#10년-만의-밸런타인데이" class="headerlink" title="10년 만의 밸런타인데이"></a>10년 만의 밸런타인데이</h3><p>이 단편은 히가시노 게이고의 다른 추리 소설들이 얼마나 재밌는지 알 수 있게 하는 작품 같다. </p><p>유명 작가가 된 미네기시는 밸런타인데이에 오래 전 사겼던 쓰다 치리코를 레스토랑에서 만나게 된다. 즐거운 대화들과 설렘도 잠시, 미네기시의 표정은 시간이 지날수록 점점 더 굳어만 간다. 미네기시의 소설은, 쓰다 치리코의 친구이자 미네기시가 쓰다 치리코를 만나기 전에 사귀었던 에미의 소설을 배꼈던 것이다. 에미를 살해한 것은 덤. 쓰다 치리코의 직업은 경찰이었고, 쓰다 치리코는 미네기시를 체포한다.</p><p>진실이 드러난 후 범행이 발각되어 절망하면서도 한편으로는 후련해하는 미네기시. 그를 보면서, 나 또한 거짓말을 하고는 후회했던 기억들을 떠올려본다. 반대로 쓰다 치리코는 어떤 기분일까. 짐작이 가질 않는다.</p><h3 id="오늘-밤은-나-홀로-히나마쓰리"><a href="#오늘-밤은-나-홀로-히나마쓰리" class="headerlink" title="오늘 밤은 나 홀로 히나마쓰리"></a>오늘 밤은 나 홀로 히나마쓰리</h3><p>결혼 예정이며 시집살이를 하게 될 딸을 걱정하는 아빠. 엄마 딸이니 걱정말라는 딸의 말을 이해하지 못한다. 이후 히나마쓰리의 진실을 파악해가며, 힘든 시집살이 속에서도 아내가 항상 웃으며 지낼 수 있었던 비결을 알게 되고, 이후 딸의 걱정을 접게 된다는 이야기. 우리는 서로가 가까우며 잘 안다고 생각하지만, 가끔식 너무 모르는 상대방의 모습에 놀라거나 당혹스러운 순간이 있다. 그런 것을 표현한 소설인 것 같다.</p><h3 id="그대-눈동자에-건배"><a href="#그대-눈동자에-건배" class="headerlink" title="그대 눈동자에 건배"></a>그대 눈동자에 건배</h3><p>잠복근무 형사. 그는 범죄자의 얼굴을 수도 없이 외운 후 경매장 같은 곳에 잠복했다가 범인을 발견하면 체포한다. 우연히 사귀게 된 여자친구의 생얼을 보고 범인임을 알아챈 후, 결국 여자친구를 감옥에 넣어버린다. 책의 제목이기도 한 핵심 소설이었으나 내게는 가장 재미가 덜 했던 것 같다.</p><h3 id="렌털-베이비"><a href="#렌털-베이비" class="headerlink" title="렌털 베이비"></a>렌털 베이비</h3><p>호기심이 많아서, 많은 경험을 해본 여자가 휴가를 내고 로봇 아기 키우기에 도전한다. 그동안 결혼해서 아기를 낳는 것에 부정적이었으나, 렌털한 로봇 베이비를 키우며 생각이 긍정적으로 변화한다. 렌털 베이비를  반환한 후 그녀와 그녀 친구와의 대화.</p><p>“애기 키워 볼까봐.”</p><p>“늦은 거 아냐? 너 60살이잖아”</p><p>“늦기는 뭘. 아직 인생의 절반도 안 살았는걸?”</p><p>소름. 렌털 베이비가 개인적으로 가장 기억에 남는다. 60살이 인생의 절반이 되는 시절인데, 나는 몇 살까지 일할 수 있을까? 장래가 걱정되기 시작한다.</p><p>이 외에도 고장 난 시계, 사파이어의 기적, 크리스마스 미스터리, 수정 염주 모두 재밌었다.</p><p>작가에 구애 받지 않고 독서하는 편인데, 나미야 백화점의 기적도 그렇고, 그대 눈동자의 건배도 그렇고, 점점 작가의 다른 소설에도 흥미가 생기기 시작한다. 언젠가 용의자 x의 헌신도 한 번 읽어봐야겠다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99D854415AC0E1E93A&quot; alt=&quot;그대 눈동자에 건배 - 히가시노 게이고&quot;&gt;&lt;/p&gt;
&lt;p&gt;히가시노 게이고는 ‘용의자 x의 헌신’ 등 추리 소설로 유명하
      
    
    </summary>
    
      <category term="Review" scheme="https://devist.github.io/categories/review/"/>
    
      <category term="Books" scheme="https://devist.github.io/categories/review/books/"/>
    
    
      <category term="독서" scheme="https://devist.github.io/tags/%EB%8F%85%EC%84%9C/"/>
    
  </entry>
  
  <entry>
    <title>Firebase Cloud Messaging</title>
    <link href="https://devist.github.io/2019/01/14/Firebase-Cloud-Messaging/"/>
    <id>https://devist.github.io/2019/01/14/Firebase-Cloud-Messaging/</id>
    <published>2019-01-13T17:28:27.000Z</published>
    <updated>2019-01-13T17:28:48.436Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Firebase" scheme="https://devist.github.io/categories/firebase/"/>
    
    
  </entry>
  
  <entry>
    <title>Jenkins with GCP_(1)Jenkins 설치</title>
    <link href="https://devist.github.io/2019/01/14/jenkins-with-gcp/"/>
    <id>https://devist.github.io/2019/01/14/jenkins-with-gcp/</id>
    <published>2019-01-13T17:21:12.000Z</published>
    <updated>2019-01-19T07:46:52.679Z</updated>
    
    <content type="html"><![CDATA[<p>Google cloud Platform에 무료 VM(리눅스 Centos7)을 할당 받아서 Gitlab, Jenkins, Webpack, Mocha를 연동하여 CI/CD를 해보려고 한다. 전문 분야는 아니지만 한 번 직접 구축해보는 것도 좋은 경험이 될 것 같다.</p><p>오늘의 목표는 Google Cloud Platform(이하 GCP)에 VM 인스턴스(Centos7)를 생성하고, Jenkins를 설치하여 실행해 보는 것이다.</p><ul><li>Step1. GCP에 Centos7 VM 인스턴스 생성</li><li>Step2. JDK 설치</li><li>Step3. Maven 설치</li><li>Step4. Jenkins 설치</li></ul><h3 id="What-is-Jenkins"><a href="#What-is-Jenkins" class="headerlink" title="What is Jenkins?"></a>What is Jenkins?</h3><p>Jenkins는 소프트웨어를 작성, 테스트 및 배포하거나 배포하는 것과 관련된 모든 종류의 작업을 자동화하는 데 사용할 수 있는 오픈 소스 자동화 서버이다. Jenkins는 기본 시스템 패키지 인 Docker에 설치하거나 Java Runtime Environment (JRE)가 설치된 모든 시스템에서 독립 실행 형으로 실행할 수도 있다. - <a href="https://jenkins.io/doc/" target="_blank" rel="noopener">Jenkins User Documentation</a></p><p><br>   </p><h1 id="Step-1-GCP-에-Centos7-VM-인스턴스-생성"><a href="#Step-1-GCP-에-Centos7-VM-인스턴스-생성" class="headerlink" title="Step 1. GCP 에 Centos7 VM 인스턴스 생성"></a>Step 1. GCP 에 Centos7 VM 인스턴스 생성</h1><h3 id="a-GCP-프로젝트-생성"><a href="#a-GCP-프로젝트-생성" class="headerlink" title="a. GCP 프로젝트 생성"></a>a. GCP 프로젝트 생성</h3><p> <a href="https://console.cloud.google.com/" target="_blank" rel="noopener">https://console.cloud.google.com</a> 에 접속하여 로그인 후, 상단의 [프로젝트 선택]을 클릭하고 [새 프로젝트] 를 클릭한다.<img src="https://t1.daumcdn.net/cfile/tistory/99C752485C398D1103" alt=""></p><p>프로젝트 이름 입력 후, ‘’만들기’’를 클릭하여 프로젝트 생성을 완료한다.<img src="https://t1.daumcdn.net/cfile/tistory/9967864D5C398D1E0F" alt=""></p><h3 id="b-VM-인스턴스-생성"><a href="#b-VM-인스턴스-생성" class="headerlink" title="b. VM 인스턴스 생성"></a>b. VM 인스턴스 생성</h3><p>왼쪽 상단 메뉴 클릭 &gt; Computer Engine &gt; VM 인스턴스를 클릭한 후, <strong>[ +인스턴스 만들기]</strong> 버튼을 클릭한다.<img src="https://t1.daumcdn.net/cfile/tistory/99F8C14A5C398D2D0E" alt=""></p><p>인스턴스 만들기 페이지에서, 머신 유형을 초소형(무료임)을 선택하고, 부팅디스크는 CentOS7을 선택한다. 나머지는 다 기본 설정으로 건들지 않고, 하단의 <strong>만들기</strong> 버튼을 클릭한다.<img src="https://t1.daumcdn.net/cfile/tistory/99E159485C398D3F0F" alt=""></p><p>다음과 같이 인스턴스가 만들어진다.<img src="https://t1.daumcdn.net/cfile/tistory/99F7DF4A5C398D4902" alt=""></p><p><br></p><p><br> </p><h1 id="Step2-사전-준비-JDK-설치"><a href="#Step2-사전-준비-JDK-설치" class="headerlink" title="Step2. 사전 준비_JDK 설치"></a>Step2. 사전 준비_JDK 설치</h1><p>젠킨스를 사용하려면 jdk와 메이븐이 CentOs에 먼저 설치되어 있어야 한다고 한다. 먼저 CentOS 인스턴스에 JDK를 설치한다. 다음과 같이 SSH 연결에서 브라우저 창에서 열기를 클릭하여 Step1에서 생성한 인스턴스에 SSH로 접속하기 위한 클라우드 터미널을 연다. <img src="https://t1.daumcdn.net/cfile/tistory/9907D14E5C398DAD0C" alt=""></p><p><img src="https://t1.daumcdn.net/cfile/tistory/9985C64E5C398DAD0F" alt=""></p><h3 id="a-JDK-설치"><a href="#a-JDK-설치" class="headerlink" title="a. JDK 설치"></a>a. JDK 설치</h3><p>쉘에 아래 명령어를 입력하여 openJDK 1.8 버전을 설치한다.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install java-<span class="number">1.8</span>.<span class="number">0</span>-openjdk-devel.x86_64</span><br></pre></td></tr></table></figure><p>아래 명령어를 입력하여 설치 결과를 확인한다.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ javac -version</span><br><span class="line">javac <span class="number">1.8</span>.<span class="number">0</span>_191</span><br></pre></td></tr></table></figure><h3 id="b-JDK-환경-변수-설정"><a href="#b-JDK-환경-변수-설정" class="headerlink" title="b. JDK 환경 변수 설정"></a>b. JDK 환경 변수 설정</h3><p><strong>JAVA_HOME 확인</strong></p><p>처음엔 JAVA_HOME에 아무런 값이 없다.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ehco <span class="variable">$JAVA_HOME</span></span><br><span class="line"></span><br><span class="line">$</span><br></pre></td></tr></table></figure><p><strong>JAVA 위치 확인</strong></p><p>환경변수를 설정하기 위해 javac의 위치를 확인한다. which 명령어로 javac 명령어의 위치를 찾는다. 이 때 찾은 위치는 심볼릭 링크이기 때문에, 원본 파일 위치를 찾기 위해서 readlink 명령어를 사용한다. 여기서 /bin/javac 이전까지의 경로가 JAVA_HOME이 된다.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ which javac</span><br><span class="line">/usr/bin/javac</span><br><span class="line">$ readlink -f /usr/bin/javac</span><br><span class="line">/usr/lib/jvm/java-<span class="number">1.8</span>.<span class="number">0</span>-openjdk-<span class="number">1.8</span>.<span class="number">0.191</span>.b12-<span class="number">1</span>.el7_6.x86_64/bin/javac</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p><strong>JAVA_HOME 설정</strong></p><p>환경변수를 설정하는 profile 파일을 vi 편집기로 연다.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/profile</span><br></pre></td></tr></table></figure><p>파일의 가장 밑에 아래 내용 추가한 후 저장한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.191.b12-1.el7_6.x86_64</span><br></pre></td></tr></table></figure><p>source 명령어를 이용해서 수정한 파일을 적용한다.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source /etc/profile</span><br></pre></td></tr></table></figure><p>마지막으로, 제대로 적용되었는지 확인한다.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ echo <span class="variable">$JAVA_HOME</span></span><br><span class="line">/usr/lib/jvm/java-<span class="number">1.8</span>.<span class="number">0</span>-openjdk-<span class="number">1.8</span>.<span class="number">0.191</span>.b12-<span class="number">1</span>.el7_6.x86_64</span><br><span class="line">$ <span class="variable">$JAVA_HOME</span>/bin/javac -version</span><br><span class="line">javac <span class="number">1.8</span>.<span class="number">0</span>_191</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p> <br></p><p><br></p><h1 id="Step3-사전-준비-maven-메이븐-설치"><a href="#Step3-사전-준비-maven-메이븐-설치" class="headerlink" title="Step3. 사전 준비_maven(메이븐) 설치"></a>Step3. 사전 준비_maven(메이븐) 설치</h1><p>이제 Maven이라는 빌드 도구를 설치한다.</p><p>사전준비로, 먼저 wget (웹 서버로부터 콘텐츠를 가져오는 프로그램, 명령어)을 설치한다.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install wget -y</span><br></pre></td></tr></table></figure><p><strong>메이븐 설치</strong></p><p>본격적으로 메이븐을 설치한다. 루트 경로에 tools라는 폴더를 만들고, 이 폴더로 이동한다.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir /tools</span><br><span class="line">$ cd /tools</span><br></pre></td></tr></table></figure><p>이동한 경로에서, maven을 다운받고 설치한다. ln 명령어로 심볼릭 링크를 걸었는데, 이는 나중에 메이븐 버전이 변경되었을 때 대응할 수 있도록 하기 위함이다.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo wget http://www-eu.apache.org/dist/maven/maven-<span class="number">3</span>/<span class="number">3.5</span>.<span class="number">4</span>/binaries/apache-maven-<span class="number">3.5</span>.<span class="number">4</span>-bin.tar.gz</span><br><span class="line">$ sudo tar xzf apache-maven-<span class="number">3.5</span>.<span class="number">4</span>-bin.tar.gz</span><br><span class="line">$ sudo ln -s apache-maven-<span class="number">3.5</span>.<span class="number">4</span>  maven</span><br></pre></td></tr></table></figure><p><strong>메이븐 환경설정 하기</strong></p><p>Maven 환경변수 설정 스크립트 파일을 생성한다.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/profile.d/maven.sh</span><br></pre></td></tr></table></figure><p>파일 내의 다음 내용을 작성한 후 저장한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export MAVEN_HOME=/tools/maven</span><br><span class="line">export PATH=$&#123;MAVEN_HOME&#125;/bin:$&#123;PATH&#125;</span><br></pre></td></tr></table></figure><p>작성 내용을 바로 적용한다.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source /etc/profile.d/maven.sh</span><br></pre></td></tr></table></figure><p>적용이 제대로 되었는지 확인한다.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn -version</span><br></pre></td></tr></table></figure><p>  <br></p><p><br></p><h1 id="Step4-Jenkins-젠킨스-설치"><a href="#Step4-Jenkins-젠킨스-설치" class="headerlink" title="Step4. Jenkins(젠킨스) 설치"></a>Step4. Jenkins(젠킨스) 설치</h1><h3 id="a-GCP-구글-클라우드-플랫폼-방화벽-설정"><a href="#a-GCP-구글-클라우드-플랫폼-방화벽-설정" class="headerlink" title="a. GCP(구글 클라우드 플랫폼) 방화벽 설정"></a>a. GCP(구글 클라우드 플랫폼) 방화벽 설정</h3><p>JDK, Mave을 설치했으니 이제 드디어 jenkins를 설치할 차례다.</p><p>그러나 먼저 해줘야할 일이 있다. VM instance 방화벽을 설정하는 것이다. 구글 클라우드 플랫폼은 VM 외부에 방화벽이 있으며, vm 내부의 os가 아닌 vm 외부에서 방화벽 설정을 제대로 해줘야 원하는 포트를 사용할 수 있다. 클라이언트가 브라우저로 jenkins를 접속할 수 있도록 하기 위해, 먼저 방화벽을 설정하도록 한다.</p><p>아래처럼 나의 인스턴스 목록에서, 사용하는 인스턴스의 [네트워크 세부정보 보기] 를 클릭한다.<img src="https://t1.daumcdn.net/cfile/tistory/995E7B4C5C398E340E" alt=""></p><p>이후 [방화벽 규칙] -&gt; [방화벽 규칙 만들기] 를 클릭한다.<img src="https://t1.daumcdn.net/cfile/tistory/99435E4C5C398E3515" alt=""></p><p>다음과 같이 설정하여 8080 포트를 사용할 수 있도록 한다.<img src="https://t1.daumcdn.net/cfile/tistory/9992CE4C5C398E3613" alt=""></p><p>방화벽 규칙이 제대로 만들어졌나 확인한다.<img src="https://t1.daumcdn.net/cfile/tistory/99691D4C5C398E3714" alt=""></p><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><h3 id="b-젠킨스-설치"><a href="#b-젠킨스-설치" class="headerlink" title="b. 젠킨스 설치"></a>b. 젠킨스 설치</h3><p>방화벽 설정이 마무리 되었으니 이제 설치를 해 볼 차례다. 먼저 Jenkins 설치를 위한 yum 레파지토리를 설정한다.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo</span><br><span class="line">$ sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key</span><br></pre></td></tr></table></figure><p>젠킨스를 설치한다.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install jenkins</span><br></pre></td></tr></table></figure><p>포트 설정을 위해 jenkins 파일을 연다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo vi /etc/sysconfig/jenkins</span><br></pre></td></tr></table></figure><p>포트를 변경한다. 나 같은 경우는 디폴트 포트인 8080을 이용한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JENKINS_PORT="8080"</span><br></pre></td></tr></table></figure><p>아까 GCP의 VM 외부에서 방화벽 설정을 했으나, 혹시 모르니 내부에서 한번 더 방화벽을 설정해준다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo firewall-cmd --permanent --zone=public --add-port=9090/tcp</span><br><span class="line"><span class="meta">$</span> sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="c-젠킨스-명령어"><a href="#c-젠킨스-명령어" class="headerlink" title="c. 젠킨스 명령어"></a>c. 젠킨스 명령어</h3><p>Jenkins 시작</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service jenkins start</span><br></pre></td></tr></table></figure><p>Jenkins 종료</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service jenkins stop</span><br></pre></td></tr></table></figure><p>Jenkins 재시작</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service jenkins restart</span><br></pre></td></tr></table></figure><p>CentOs에서 젠킨스를 항상 실행하게 설정</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable jenkins</span><br></pre></td></tr></table></figure><h3 id="d-브라우저로-젠킨스에-접속하기"><a href="#d-브라우저로-젠킨스에-접속하기" class="headerlink" title="d. 브라우저로 젠킨스에 접속하기"></a>d. 브라우저로 젠킨스에 접속하기</h3><p>먼저 service jenkins start로 젠킨스를 동작시키고, 웹 브라우저로 접속해본다.</p><p>접속 주소는 <strong>http://외부 IP:8080</strong> 이다.<img src="https://t1.daumcdn.net/cfile/tistory/9987E54F5C398E960F" alt=""></p><p>다음과 같이 최초 화면이 뜬다면 성공.<img src="https://t1.daumcdn.net/cfile/tistory/9964874F5C398E9833" alt=""></p><p>Administrator password에는 다음의 명령어로 확인되는 코드를 입력해준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cat /var/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><p>코드 입력 후 continue 를 누르면 다음의 화면이 나오는데, 젠킨스는 다양한 기능등릉 플러그인으로 제공하지만, 일단 여기서는 install suggested plugins로 설치를 진행하고 마무리한다.<img src="https://t1.daumcdn.net/cfile/tistory/993357435C398EB314" alt=""></p><p>설치 완료!<img src="https://t1.daumcdn.net/cfile/tistory/992599445C398EC40D" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Google cloud Platform에 무료 VM(리눅스 Centos7)을 할당 받아서 Gitlab, Jenkins, Webpack, Mocha를 연동하여 CI/CD를 해보려고 한다. 전문 분야는 아니지만 한 번 직접 구축해보는 것도 좋은 경험
      
    
    </summary>
    
      <category term="Cloud" scheme="https://devist.github.io/categories/cloud/"/>
    
      <category term="CI/CD" scheme="https://devist.github.io/categories/cloud/ci-cd/"/>
    
    
      <category term="GCP" scheme="https://devist.github.io/tags/gcp/"/>
    
      <category term="CD" scheme="https://devist.github.io/tags/cd/"/>
    
      <category term="CI" scheme="https://devist.github.io/tags/ci/"/>
    
      <category term="Google Cloud Platform" scheme="https://devist.github.io/tags/google-cloud-platform/"/>
    
      <category term="centos7" scheme="https://devist.github.io/tags/centos7/"/>
    
      <category term="jenkins" scheme="https://devist.github.io/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>2018년 회고하기</title>
    <link href="https://devist.github.io/2019/01/14/Retrospect-for-2018/"/>
    <id>https://devist.github.io/2019/01/14/Retrospect-for-2018/</id>
    <published>2019-01-13T17:10:03.000Z</published>
    <updated>2019-01-14T10:02:46.683Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2018년"><a href="#2018년" class="headerlink" title="2018년"></a>2018년</h2><p>2018년은 업무적으로도, 개인의 삶을 돌아보아도 아쉬움이 남는, 색깔 없는 한 해였다. 반성이 필요한 한 해였다.</p><p>업무적으로는, 물론 매일 조금씩 나아지긴 했다. ES6 를 학습하고, Vue.js 프레임워크를 사용할 수 있게 되고, Kotlin으로 안드로이드 앱 개발이 가능해졌다. 그러나 입사 후 점점 기술 스펙트럼은 넓어지지만, 깊이를 가질 수 없게 되어가고 있다. 근 2년 동안 운영-&gt;안드로이드 앱개발-&gt;하이브리드앱 개발-&gt;PM-&gt;마케팅-&gt;일부 풀스택 웹 개발 등 정말 다양한 일을 해왔다. 이렇게 물 흐르듯, 스쳐가며 배우는 것들이 과연 내게 도움이 될까. 전문성을 키우지 못하고 기술적으로 정체 또는 퇴보하고 있다는 아쉬움이 드는 한편, 평생 직장인을 할 자신도 없는 나이므로, 오히려 추후 창업할 때에는 이런 경험이 도움이 되지 않을까 애써 위로해본다.</p><p>삶적으로는, 너무나도 게으르고 무기력했다. 배고플 때 먹고, 운동은 거의 하지 않는 상태로 30대로 진입까지 해버리니 예전만큼 팔팔하지 못하다는게 내 스스로도 느껴진다. 또한 여가 시간을 투자해서 했던 일들도 뜻대로 되지 않았으며, 열심히 투자한 시간만큼 하고 싶었던 다른 일들(학습, 운동 등)은 아예 뒷전이었던 것 같다. 연고 없는 타지역에 와서, 더 적극적으로 주변을 챙겨야 했음에도 불구하고, 먼저 연락하여 챙기기는 커녕 오는 연락에도 귀찮아하며 말도 안되는 핑계로 거절하는 일이 다반사였다.</p><h4 id="망한-일본-오사카-여행"><a href="#망한-일본-오사카-여행" class="headerlink" title="망한 일본 오사카 여행"></a>망한 일본 오사카 여행</h4><p>2박3일로 잡아두었던 일본 오사카 여행. </p><p>1차적으로, 일이 생겨서 1박 2일로 변경하며 금전적 손실이 발생했다. 2차는, 이번 년도 제주도를 자주 왕래하다보니, 비행기 탑승가능시간을 제주도 갈때처럼 몇 십 분 전에도 가능할거라고 착각하여 비행기를 놓쳤다. 2차로 금전적 손실이 발생했다.</p><p>갈까말까 고민하다가 결국 다른 비행기를 끊어서 오사카로 가 친구를 만났지만, 이미 늦은 저녁이라 저녁만 먹고 끝났다. 다음날에는 교토 기온거리를 조금 관광한후 다시 한국으로 돌아오는 비행기를 타러가야했다.</p><p>3차로, 예상치 못한 일이 발생했다. 왕복권은 탑승이 취소되면, 돌아오는 항공편도 취소된다는데 몰랐다. 나는 항공권이 있는줄 알았는데, 없던 것이다! 급하게 한국 가는 항공편 예약하느라 진땀을 뺐다. 거의 당일치기와 다름없었던, 돈을 허공에 뿌리고 온 여행이라, 크게 기억에 남는다..</p><h4 id="이사"><a href="#이사" class="headerlink" title="이사"></a>이사</h4><p>월세에서 전세로 옮겼다. 둘 다 좁은 공간이지만, 이번에는 복층이라 조금 더 답답하지 않게 살 수 있게 되었다. 전세로 전환하며 매달 고정지출비용도 많이 아낄 수 있게 되었다. (인테리어 하느라 돈 더 쓴 거 같은 기분은 안 비밀)</p><h4 id="결혼-Party"><a href="#결혼-Party" class="headerlink" title="결혼 Party"></a>결혼 Party</h4><p>주변에 결혼하는 사람이 해가 갈 수록 증가하는 기분이다. 많을 때는 정말 한 달 중 세 번의 주말을 결혼식장에서 보낸 것 같다. 좋아하는 사람들이 결혼하여 신혼 생활을 하는 것은 물론 기분 좋고 행복한 일이다. 그러나 매 달 최소 1회 이상 결혼식을 방문하는 건, 마냥 생각없이 기뻐할 수 없는 일이었다.</p><p>그럼에도 축하하며, 정말로 방문했던 모든 부부와 관련 지인들이 앞으로 더 행복하길 바래본다.</p><h4 id="방송-출연"><a href="#방송-출연" class="headerlink" title="방송 출연"></a>방송 출연</h4><p>우연한 계기로 그룹 방송에 출연했다. 특별한 사람이 아님에도 불구하고 나를 추천해준 회사 분들께 감사하다. 물론 촬영 시기가 좋지 않아서 원하는 모습을 못 보여드린 건 아쉽고, 또한 거의 삭발 수준이었을 때 촬영하게 된 것도 아쉽다. 그룹 방송 외에도, AI 어쩌고를 주제로 한 MBC 방송에도 내 모습이 나왔다. 하나의 점같이 나왔지만, 나온 건 나온거니까.. 하필 이사하느라 스마트폰으로 용달 부르고 있는 모습이 찍혀서 당황스러웠다..ㅋ</p><img src="/2019/01/14/Retrospect-for-2018/mbc.png" title="a"><p>인생 살면서 한 번 쯤 지나가는 행인 1으로라도, TV 같은데 출연해보는게 하나의 버킷리스트였는데, 2018년에 이룬 것 같다.</p><h4 id="Nexters"><a href="#Nexters" class="headerlink" title="Nexters"></a>Nexters</h4><p>회사 선배의 소개로 Nexters라는 대외활동에 지원하게 되었고, 불쑥 합격했다. IT에 관심 있는 대학생들과, IT 현업에서 일하고 있는 직장인들이 모여 방학기간동안 함께 팀을 이뤄 프로젝트를 진행하는 대외활동이다. 대학생들과 같이 협업해볼 수 있어서 좋았고, 실력 좋은 현직 직장인들과 교류할 수 있어서 좋았다. 아쉽게도 이번 겨울에는 개인 사정으로 참여하지 못했지만, 19년 여름방학에는 꼭 참여해서 수료하겠다.</p><h2 id="2019년-목표"><a href="#2019년-목표" class="headerlink" title="2019년 목표"></a>2019년 목표</h2><p>새해에는 목표와 목적을 갖고, 발전적인 삶을 살고 싶다. 더이상 늦출 수 없는 것들을 올 한 해 이뤄내고 싶다.</p><ul><li>기술적으로 발전하기<ul><li>꾸준한 블로깅</li><li>회사 프로세스 기록</li><li>안드로이드<ul><li>kotlin, Rx 를 활용한 개인앱 2개 출시</li></ul></li><li>회사 프로젝트에 React 적용</li><li>알고리즘 100문제 풀기</li></ul></li><li>운동 한가지 시작하기</li><li>자격증 1개 취득(이번에야말로…)</li><li>금연하기(이번에야말로..)</li><li>운전 면허 취득하기(이번에야말로…)</li><li>영어 실력 키우기<ul><li>스피킹 맥스 완강하여 장학금 타기</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2018년&quot;&gt;&lt;a href=&quot;#2018년&quot; class=&quot;headerlink&quot; title=&quot;2018년&quot;&gt;&lt;/a&gt;2018년&lt;/h2&gt;&lt;p&gt;2018년은 업무적으로도, 개인의 삶을 돌아보아도 아쉬움이 남는, 색깔 없는 한 해였다. 반성이 필요한 
      
    
    </summary>
    
      <category term="Log" scheme="https://devist.github.io/categories/log/"/>
    
      <category term="Year" scheme="https://devist.github.io/categories/log/year/"/>
    
    
  </entry>
  
  <entry>
    <title>비욘드 사일러스(Beyond Silence) - 인기는 인기 있어야 할까</title>
    <link href="https://devist.github.io/2019/01/14/review-movies-beyond-silence/"/>
    <id>https://devist.github.io/2019/01/14/review-movies-beyond-silence/</id>
    <published>2019-01-13T16:02:33.000Z</published>
    <updated>2019-01-13T16:07:44.089Z</updated>
    
    <content type="html"><![CDATA[<p><strong>비욘드 사일런스(Beyond Silence)</strong></p><p><img src="https://t1.daumcdn.net/cfile/tistory/2550644057ABFD6821" alt="img"></p><p><img src="https://t1.daumcdn.net/cfile/tistory/2156A54057ABFD6A1D" alt="img"></p><h2 id="줄거리"><a href="#줄거리" class="headerlink" title="줄거리"></a>줄거리</h2><p>그냥 지나치기엔 너무나 따뜻하고 아름다운 작품. 청각장애인 부모 사이에서 태어난 라라는 그들에게는 보물과도 같은 존재다. </p><p>외부세계와 다리가 되어 모든 일을 현명하게 처리하던 귀여운 꼬마 소녀 라라. 그녀는 자라면서 음악에 관심을 기울인다. 그것도 아버지인 마틴이 싫어하는 “클라리넷” 연주자가 되기를 꿈꾼다. </p><p>이 클라리넷 연주는 마틴의 누이가 즐기던 것이었다. 태어날 때부터 청각장애자였던 마틴은 누이의 연주를 보고 경탄하는 식구들과 손님들에 의해 심한 콤플렉스를 느낄 수밖에 없었다. </p><p>성인이 된 라라는 어머니마저 죽게 되자 아버지의 심한 간섭을 견디지 못하고 베를린에서 음악 수업을 하기로 결심한다. “침묵을 넘어서”라고 번역될 이 영화의 제목은 모든 것을 말해준다. </p><p>아버지와 딸이 침묵을 넘어 서로 이해할 수 있을까.</p><p>더 나아가 관객들은 소리없는 청각장애자들의 세계를 이해할 수 있을까. </p><p>결말 부분이 다소 상투적이긴 하지만 적잖은 질문과 고민을 전해줄 만한 아름다운 드라마다.</p><h2 id="인기는-인기-있어야-할까"><a href="#인기는-인기-있어야-할까" class="headerlink" title="인기는 인기 있어야 할까"></a>인기는 인기 있어야 할까</h2><p>인기 있고 싶어 하는 사람은 왜 그런 걸까. 만약 내가 인기 있고 싶었다면? </p><p>이유는, 즐겁고 싶고, 행복하고 싶어서가 아닐까 생각한다. </p><p>소크라테스식 사고방식으로 생각해보자.</p><p>인기 있음은 행복하다. 하지만, 인기 없어도 행복한 사람이 존재하지 않을까? 인기 있어도 행복하지 않은 사람은 없는 걸까?</p><p>두 가지 물음 모두 존재할 거라는 생각이 든다. 시작하자마자 오류가 존재한다.</p><p>영화 ‘비욘드 사일런스’의 주인공 라라는 소리를 듣지 못하는 아버지와 잦은 충돌을 일으킨다.</p><p>꿈을 위해 가족을 떠나 고모와 지냈다. 아버지는 ‘자신의 꿈만 생각하고 가족을 떠나는 건 이기심이다’라고 한다.</p><p>하지만 라라는 그런 비난을 극복하고, 극적으로 아버지의 이해를 받아낸다.</p><p>이것은 라라가 자신만의 생각, 신념이 있었기 때문에 휩쓸리지 않고 자신의 길을 갔기 때문이라고 생각한다.</p><p>자신이 잘못되었다는 비난에 그대로 포기하지 않는 것도 이 때문에 가능했던 것이리라.</p><p>여기서 ‘영화와 철학’ 시간에 배운 인기 없는 사람들에 대해서도 생각해 볼 수 있지 않을까.</p><p>그녀는 비록 또래 친구들에게 인기는 없을지라도, 자신의 꿈을 실천하는 중이므로 행복할 것 같다.</p><p>‘인기가 없어도 행복하다’라는 사람이 존재하는 것이다.</p><p>고모 클라레스를 생각해보면, 그녀의 아버지에게 사랑받고, 그녀의 오빠에게는 질투를 받으며,</p><p>주인공 라라에게는 동경의 대상이 된다. 인기 있는 것이다. 하지만 영화에서 그녀는 행복하지 않다. </p><p>‘인기는 있지만 행복하지 않다’는 사람이 존재하는 것이다.</p><p>나는 오래 전 철학자인 소크라테스의 도움으로 쉽게 내 생각의 오류를 찾아낼 수 있었고,</p><p>그 예를 영화에서 찾아냈다. 그러면, 인기라는 건 또 무엇인가?</p><p>인기라는 것도 두가지 종류가 있다. 하나는 자신의 확고한 신념, 생각 등이 있기 때문에</p><p>자신감 넘치고, 행동에 거침이 없기 때문에 인기가 있는 것이고,</p><p>또 하나는 세상에 굴복해 남의 비위나 맞춰 주고 순종적이어서 대하기 편하기 때문에 인기 있는 것이다.</p><p>라라가 인기 있다면 그녀의 경우는 전자가 아닐까. 영화에서 결말은 나지 않았지만,</p><p>그녀는 시험에서 좋은 연주를 펼쳤고, 그래서 합격해 유명한 음악인이 되었다면 그녀의 용기와 불굴의 의지 등</p><p>때문에 인기 있을지 모르는 일이기 때문이다. 그리고 이 경우가 더 행복할 것 같다.</p><p>이쯤 되면, 인기라는 것이 무의미해 보인다. 인기라는 것으로 행복해 질 수 있는 것도 아닌 것 같다.</p><p>또한 내가 생각한 두 종류의 인기 중 후자는 진실로 인기 있는 것 같지도 않다.</p><p>전자의 경우도 인기보다는 먼저 라라처럼 자신의 생각, 신념 등을 가지는 게 더 중요해 보인다.</p><p>결국에는 인기 없음, 있음이 문제가 아닌 것이다.</p><p>‘인기라는 게 아무 의미 없는 것이다’ 라는 생각까지 든다.</p><p>라라는 책 ‘젊은 베르테르의 기쁨’의 한 구절처럼 다른 사람의 호의를 얻으려는 욕망에서 자유로웠다.</p><p>항상 자신이 옳다고 믿는대로 행동했고, 확고한 자신의 생각을 가지고 있었다.</p><p>아버지도 결국엔 그녀를 이해해 줬으며, 그녀는 꿈을 향해 나아가고 있기에 행복하다고 생각한다.</p><p>내가 생각하는 해피엔딩의 결말대로라면, 그녀는 결국에 인기까지 얻을 것이다. </p><p>마치 소크라테스처럼.</p><p>그러기에 중요한건 나의 생각을 가꾸고 다듬어서 깊은 확신을 갖는 것이지,</p><p>한낱 인기 따위에 의미를 두어서는 안 될 것 같다.</p><p>그건 부차적인 것이므로.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;비욘드 사일런스(Beyond Silence)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/2550644057ABFD6821&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;im
      
    
    </summary>
    
      <category term="Review" scheme="https://devist.github.io/categories/review/"/>
    
      <category term="Movies" scheme="https://devist.github.io/categories/review/movies/"/>
    
    
  </entry>
  
  <entry>
    <title>독서기록) 변신</title>
    <link href="https://devist.github.io/2019/01/14/review-book-1/"/>
    <id>https://devist.github.io/2019/01/14/review-book-1/</id>
    <published>2019-01-13T15:25:05.000Z</published>
    <updated>2019-01-14T14:04:17.966Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://t1.daumcdn.net/cfile/tistory/212F033957AD8FC51D" alt="img"><br>변신. 어린 시절 누구나 한번쯤 꿈꾸어보지 않았을까.<br>어린 시절 하늘을 날아보고 싶어 ‘새’로 변신한 내 모습을 상상해보기도 했고,<br>한창 운동을 하던 시절에는 시합 도중 능력만 ‘사범’님으로 변신해서 금메달을 목에 거는 내 모습을 꿈꾸기도 했다.<br>이 책에는 어떤 ‘변신’이 기다리고 있을까? 책을 반값에 구입한 사실만큼이나 이러한 상상 또한 즐거웠다. </p><blockquote><p>“그레고르는 고개를 돌려 아버지를 쳐다보았다. 지금 저기 서 있는 저런 아버지의 모습은 정말이지 상상조차 해본 적이 없었다. (중략) 그러나 아무리 그렇다고 해도 과연 저 사람이 아버지란 말인가? 예전에 그레고르가 출장을 떠날 때면 늘 지친 모습으로 침대에 파묻혀 누워 있던 바로 그 사람이 맞는 걸까?” -83페이지</p></blockquote><p>그레고르가 벌레로 변신한 후에 그레고르의 아버지, 어머니, 여동생은 새로운 상황에 직면하게 된다.<br>그레고르처럼 극단적인 변신은 아니지만, 그들 또한 나름대로 놀랄만한 변신을 하게 되는 것이다.<br>집 안의 든든한 기둥이던 그레고르가 본인의 역할을 못하게 됨으로서 힘들어 하기도 하지만 결국엔 적응하고 방법을 모색한다.<br>가끔씩은 오히려 더 행복해보이기까지 한다.<br>이런 그들의 ‘변신’을 보면서 기대는 삶, 기댈 곳이 있는 삶, 역할 등에 대해 많은 생각을 해보았다.</p><h3 id="고전-입문자에게-추천할만한-책"><a href="#고전-입문자에게-추천할만한-책" class="headerlink" title="고전 입문자에게 추천할만한 책"></a>고전 입문자에게 추천할만한 책</h3><p>이 소설은 길지 않다. 137페이지 밖에 안 된다. 짧은 시간 안에 읽을 수 있다.</p><p>한 권의 책을 읽고 나면 다른 이들의 리뷰 한 두개 정도는 꼭 읽게 되곤 한다.<br>책을 읽는 것 자체도 재밌지만, 같은 책을 읽고 다른 사람들은 어떻게 느꼈는지,<br>이 책이 가지는 의미가 무엇인지 알아보는 과정 또한 의미있고 재미있다.<br>이번에도 책 뒷편에 나와 있는 ‘옮긴이의 말’을 통해서 이 소설에 대해 더 많이 알게 됐다.</p><p>고전은 읽다 보면 문장이 어렵다거나, 부분적으로 내용이 지루하게 느껴지는 등의 이유로 쉽게 읽히지 않는다.<br>하지만 이 소설은 길지 않고, 인간에서 벌레로 변신한 인간 이야기라는 흥미로운 주제로 이야기를 풀어나가기 때문에<br>단숨에 끝까지 읽을 수 있었다.<br>거기다가 이 책의 적절한 그림과 이야기를 재미있게 읽고 난 후 뒤에 덧붙인 옮긴이의 해설까지 읽고 나면,<br>이 소설에 담긴 의미를 다양한 관점에서 바라볼 수 잇다.<br>그레고르의 아버지 입장에서, 어머니 입장에서, 여동생의 입장에 서서 이 소설을 읽는 것도 재미있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/212F033957AD8FC51D&quot; alt=&quot;img&quot;&gt;&lt;br&gt;변신. 어린 시절 누구나 한번쯤 꿈꾸어보지 않았을까.&lt;br&gt;어린 시절 하늘을 날아보고 싶어 ‘새’로 
      
    
    </summary>
    
      <category term="Review" scheme="https://devist.github.io/categories/review/"/>
    
      <category term="Books" scheme="https://devist.github.io/categories/review/books/"/>
    
    
  </entry>
  
</feed>
